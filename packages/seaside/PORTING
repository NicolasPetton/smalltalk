Portability problems fixed upstream:

*1) we placed WACodecTest in a separate file, they might want to do that too

*3) #day expected to return #dayOfYear -- fixed in WAPlatformTest

*5) WALocale class >> parseCountryString

*6) WAHtmlRootTest >> testLinkElementWithContent is actually correct, should give '<title></title><style type="text/css">/*<![CDATA[*/body { margin: 0pt; padding: 0pt;}/*]]>*/</style>'.  how come it passes in Squeak?

*7) expected '%0D' in WAEncoderTest>>#testEncodedUrl is a problem;
should use (String with: Character cr) instead

*9) Different implementation of WAScriptTag >> with:, checking specially for nil

*10) WAResourceBaseUrlTest>>#testScriptTag is actually correct, should give '<script src="https:/www.seaside.st/resources/track.js" type="text/javascript">/*<![CDATA[*//*]]>*/</script>'

*12) Where is WADispatcherFiles?

----------

Changes to do manually:
1) add imports to the classes in Seaside-Adapters-Swazoo and namespaces to superclasses
2) BlockContext -> BlockClosure
3) WAAcceptTest >> testMozilla, remove ...000000001 tail
4) remove testColorAsHtmlColor
5) UnicodeString in testNonLatinWindowsPath?

----------

Errors left:
    Seaside.WADispatcherTest>>#testAlternateConfig
    Seaside.WADispatcherTest>>#testAlternateFiles
    Seaside.WADispatcherTest>>#testDefaultConfig
    Seaside.WADispatcherTest>>#testRootDispatcher

Failures (all in Squeak too):
    Seaside.WADispatcherTest>>#testRootDispatcherChange
    Seaside.WADispatcherTest>>#testRootDispatcherDependency
    Seaside.WALocaleTest>>#testLanguageNameIso3
    Seaside.WAResourceBaseUrlTest>>#testAbsoluteFtpUrl
    Seaside.WAResourceBaseUrlTest>>#testFileNameWithHttp

----------

The script I used for conversion:

./gst -f ../scripts/Convert.st -f squeak \
  -c'-^Seaside-Platform$' \
  -C'-^Continuation$' \
  -r'Float->FloatD' \
  -r'MessageSend->DirectedMessage' \
  -r'DateAndTime->DateTime' \
  -r'(``@object ifNil: ``@arg ifNotNil: [ | `@t2 | `@.s2 ] )->
     (``@object ifNil: ``@arg ifNotNil: [ :foo || `@t2 | `@.s2 ])' \
  -r'(``@object ifNotNil: [ | `@t2 | `@.s2 ] ifNil: ``@arg )->
     (``@object ifNotNil: [ :foo || `@t2 | `@.s2 ] ifNil: ``@arg)' \
  -r'(``@object ifNotNil: [ | `@t2 | `@.s2 ] )->
     (``@object ifNotNil: [ :foo || `@t2 | `@.s2 ])' \
  -r'(``@object ifNil: ``@arg1 ifNotNilDo: ``@arg2 )->
     (``@object ifNil: ``@arg1 ifNotNil: ``@arg2)' \
  -r'(``@object ifNotNilDo: ``@arg2 ifNil: ``@arg1 )->
     (``@object ifNotNil: ``@arg2 ifNil: ``@arg1)' \
  -r'(``@object ifNotNilDo: ``@arg2 )->
     (``@object ifNotNil: ``@arg2)' \
  -r'(``@object doIfNotNil: ``@arg2 )->
     (``@object ifNotNil: ``@arg2)' \
  -r'(``@object on: ``@arg2 do: [ | `@t2 | `@.s2 ])->
     (``@object on: ``@arg2 do: [ :ex || `@t2 | `@.s2 ])' \
  -r'(``@object findTokens: Character cr )->
     (``@object lines)' \
  -r'(``@object subStrings: String crlf )->
     (``@object lines)' \
  -r'(``@object newFrom: ``@arg2 )->
     (``@object from: ``@arg2)' \
  -r'(Dictionary withAll: ``@arg2 )->
     (Dictionary from: ``@arg2)' \
  -r'((Character value: ``@arg2 ) toString)->
     ((Character codePoint: ``@arg2) asString)' \
  -r'(``@object day )->(``@object dayOfYear)' \
 "$@"
