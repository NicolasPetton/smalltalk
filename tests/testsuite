#! /bin/sh
#
# Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006 Free Software
# Foundation, Inc.
# This test suite is free software; the Free Software Foundation gives
# unlimited permission to copy, distribute and modify it.
## --------------------- ##
## M4sh Initialization.  ##
## --------------------- ##

# Be more Bourne compatible
DUALCASE=1; export DUALCASE # for MKS sh
if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then
  emulate sh
  NULLCMD=:
  # Zsh 3.x and 4.x performs word splitting on ${1+"$@"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '${1+"$@"}'='"$@"'
  setopt NO_GLOB_SUBST
else
  case `(set -o) 2>/dev/null` in
  *posix*) set -o posix ;;
esac

fi




# PATH needs CR
# Avoid depending upon Character Ranges.
as_cr_letters='abcdefghijklmnopqrstuvwxyz'
as_cr_LETTERS='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
as_cr_Letters=$as_cr_letters$as_cr_LETTERS
as_cr_digits='0123456789'
as_cr_alnum=$as_cr_Letters$as_cr_digits

# The user is always right.
if test "${PATH_SEPARATOR+set}" != set; then
  echo "#! /bin/sh" >conf$$.sh
  echo  "exit 0"   >>conf$$.sh
  chmod +x conf$$.sh
  if (PATH="/nonexistent;."; conf$$.sh) >/dev/null 2>&1; then
    PATH_SEPARATOR=';'
  else
    PATH_SEPARATOR=:
  fi
  rm -f conf$$.sh
fi

# Support unset when possible.
if ( (MAIL=60; unset MAIL) || exit) >/dev/null 2>&1; then
  as_unset=unset
else
  as_unset=false
fi


# IFS
# We need space, tab and new line, in precisely that order.  Quoting is
# there to prevent editors from complaining about space-tab.
# (If _AS_PATH_WALK were called with IFS unset, it would disable word
# splitting by setting IFS to empty value.)
as_nl='
'
IFS=" ""	$as_nl"

# Find who we are.  Look in the path if we contain no directory separator.
case $0 in
  *[\\/]* ) as_myself=$0 ;;
  *) as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  test -r "$as_dir/$0" && as_myself=$as_dir/$0 && break
done
IFS=$as_save_IFS

     ;;
esac
# We did not find ourselves, most probably we were run as `sh COMMAND'
# in which case we are not to be found in the path.
if test "x$as_myself" = x; then
  as_myself=$0
fi
if test ! -f "$as_myself"; then
  echo "$as_myself: error: cannot find myself; rerun with an absolute file name" >&2
  { (exit 1); exit 1; }
fi

# Work around bugs in pre-3.0 UWIN ksh.
for as_var in ENV MAIL MAILPATH
do ($as_unset $as_var) >/dev/null 2>&1 && $as_unset $as_var
done
PS1='$ '
PS2='> '
PS4='+ '

# NLS nuisances.
for as_var in \
  LANG LANGUAGE LC_ADDRESS LC_ALL LC_COLLATE LC_CTYPE LC_IDENTIFICATION \
  LC_MEASUREMENT LC_MESSAGES LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER \
  LC_TELEPHONE LC_TIME
do
  if (set +x; test -z "`(eval $as_var=C; export $as_var) 2>&1`"); then
    eval $as_var=C; export $as_var
  else
    ($as_unset $as_var) >/dev/null 2>&1 && $as_unset $as_var
  fi
done

# Required to use basename.
if expr a : '\(a\)' >/dev/null 2>&1 &&
   test "X`expr 00001 : '.*\(...\)'`" = X001; then
  as_expr=expr
else
  as_expr=false
fi

if (basename -- /) >/dev/null 2>&1 && test "X`basename -- / 2>&1`" = "X/"; then
  as_basename=basename
else
  as_basename=false
fi


# Name of the executable.
as_me=`$as_basename -- "$0" ||
$as_expr X/"$0" : '.*/\([^/][^/]*\)/*$' \| \
	 X"$0" : 'X\(//\)$' \| \
	 X"$0" : 'X\(/\)' \| . 2>/dev/null ||
echo X/"$0" |
    sed '/^.*\/\([^/][^/]*\)\/*$/{
	    s//\1/
	    q
	  }
	  /^X\/\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\/\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`

# CDPATH.
$as_unset CDPATH


if test "x$CONFIG_SHELL" = x; then
  if (eval ":") 2>/dev/null; then
  as_have_required=yes
else
  as_have_required=no
fi

  if test $as_have_required = yes && 	 (eval ":
(as_func_return () {
  (exit \$1)
}
as_func_success () {
  as_func_return 0
}
as_func_failure () {
  as_func_return 1
}
as_func_ret_success () {
  return 0
}
as_func_ret_failure () {
  return 1
}

exitcode=0
if as_func_success; then
  :
else
  exitcode=1
  echo as_func_success failed.
fi

if as_func_failure; then
  exitcode=1
  echo as_func_failure succeeded.
fi

if as_func_ret_success; then
  :
else
  exitcode=1
  echo as_func_ret_success failed.
fi

if as_func_ret_failure; then
  exitcode=1
  echo as_func_ret_failure succeeded.
fi

if ( set x; as_func_ret_success y && test x = \"\$1\" ); then
  :
else
  exitcode=1
  echo positional parameters were not saved.
fi

test \$exitcode = 0) || { (exit 1); exit 1; }

(
  as_lineno_1=\$LINENO
  as_lineno_2=\$LINENO
  test \"x\$as_lineno_1\" != \"x\$as_lineno_2\" &&
  test \"x\`expr \$as_lineno_1 + 1\`\" = \"x\$as_lineno_2\") || { (exit 1); exit 1; }
") 2> /dev/null; then
  :
else
  as_candidate_shells=
    as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in /bin$PATH_SEPARATOR/usr/bin$PATH_SEPARATOR$PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  case $as_dir in
	 /*)
	   for as_base in sh bash ksh sh5; do
	     as_candidate_shells="$as_candidate_shells $as_dir/$as_base"
	   done;;
       esac
done
IFS=$as_save_IFS


      for as_shell in $as_candidate_shells $SHELL; do
	 # Try only shells that exist, to save several forks.
	 if { test -f "$as_shell" || test -f "$as_shell.exe"; } &&
		{ ("$as_shell") 2> /dev/null <<\_ASEOF
if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then
  emulate sh
  NULLCMD=:
  # Zsh 3.x and 4.x performs word splitting on ${1+"$@"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '${1+"$@"}'='"$@"'
  setopt NO_GLOB_SUBST
else
  case `(set -o) 2>/dev/null` in
  *posix*) set -o posix ;;
esac

fi


:
_ASEOF
}; then
  CONFIG_SHELL=$as_shell
	       as_have_required=yes
	       if { "$as_shell" 2> /dev/null <<\_ASEOF
if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then
  emulate sh
  NULLCMD=:
  # Zsh 3.x and 4.x performs word splitting on ${1+"$@"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '${1+"$@"}'='"$@"'
  setopt NO_GLOB_SUBST
else
  case `(set -o) 2>/dev/null` in
  *posix*) set -o posix ;;
esac

fi


:
(as_func_return () {
  (exit $1)
}
as_func_success () {
  as_func_return 0
}
as_func_failure () {
  as_func_return 1
}
as_func_ret_success () {
  return 0
}
as_func_ret_failure () {
  return 1
}

exitcode=0
if as_func_success; then
  :
else
  exitcode=1
  echo as_func_success failed.
fi

if as_func_failure; then
  exitcode=1
  echo as_func_failure succeeded.
fi

if as_func_ret_success; then
  :
else
  exitcode=1
  echo as_func_ret_success failed.
fi

if as_func_ret_failure; then
  exitcode=1
  echo as_func_ret_failure succeeded.
fi

if ( set x; as_func_ret_success y && test x = "$1" ); then
  :
else
  exitcode=1
  echo positional parameters were not saved.
fi

test $exitcode = 0) || { (exit 1); exit 1; }

(
  as_lineno_1=$LINENO
  as_lineno_2=$LINENO
  test "x$as_lineno_1" != "x$as_lineno_2" &&
  test "x`expr $as_lineno_1 + 1`" = "x$as_lineno_2") || { (exit 1); exit 1; }

_ASEOF
}; then
  break
fi

fi

      done

      if test "x$CONFIG_SHELL" != x; then
  for as_var in BASH_ENV ENV
        do ($as_unset $as_var) >/dev/null 2>&1 && $as_unset $as_var
        done
        export CONFIG_SHELL
        exec "$CONFIG_SHELL" "$as_myself" ${1+"$@"}
fi


    if test $as_have_required = no; then
  echo This script requires a shell more modern than all the
      echo shells that I found on your system.  Please install a
      echo modern shell, or manually run the script under such a
      echo shell if you do have one.
      { (exit 1); exit 1; }
fi


fi

fi



(eval "as_func_return () {
  (exit \$1)
}
as_func_success () {
  as_func_return 0
}
as_func_failure () {
  as_func_return 1
}
as_func_ret_success () {
  return 0
}
as_func_ret_failure () {
  return 1
}

exitcode=0
if as_func_success; then
  :
else
  exitcode=1
  echo as_func_success failed.
fi

if as_func_failure; then
  exitcode=1
  echo as_func_failure succeeded.
fi

if as_func_ret_success; then
  :
else
  exitcode=1
  echo as_func_ret_success failed.
fi

if as_func_ret_failure; then
  exitcode=1
  echo as_func_ret_failure succeeded.
fi

if ( set x; as_func_ret_success y && test x = \"\$1\" ); then
  :
else
  exitcode=1
  echo positional parameters were not saved.
fi

test \$exitcode = 0") || {
  echo No shell found that supports shell functions.
  echo Please tell autoconf@gnu.org about your system,
  echo including any error possibly output before this
  echo message
}



  as_lineno_1=$LINENO
  as_lineno_2=$LINENO
  test "x$as_lineno_1" != "x$as_lineno_2" &&
  test "x`expr $as_lineno_1 + 1`" = "x$as_lineno_2" || {

  # Create $as_me.lineno as a copy of $as_myself, but with $LINENO
  # uniformly replaced by the line number.  The first 'sed' inserts a
  # line-number line after each line using $LINENO; the second 'sed'
  # does the real work.  The second script uses 'N' to pair each
  # line-number line with the line containing $LINENO, and appends
  # trailing '-' during substitution so that $LINENO is not a special
  # case at line end.
  # (Raja R Harinath suggested sed '=', and Paul Eggert wrote the
  # scripts with optimization help from Paolo Bonzini.  Blame Lee
  # E. McMahon (1931-1989) for sed's syntax.  :-)
  sed -n '
    p
    /[$]LINENO/=
  ' <$as_myself |
    sed '
      s/[$]LINENO.*/&-/
      t lineno
      b
      :lineno
      N
      :loop
      s/[$]LINENO\([^'$as_cr_alnum'_].*\n\)\(.*\)/\2\1\2/
      t loop
      s/-\n.*//
    ' >$as_me.lineno &&
  chmod +x "$as_me.lineno" ||
    { echo "$as_me: error: cannot create $as_me.lineno; rerun with a POSIX shell" >&2
   { (exit 1); exit 1; }; }

  # Don't try to exec as it changes $[0], causing all sort of problems
  # (the dirname of $[0] is not the place where we might find the
  # original and so on.  Autoconf is especially sensitive to this).
  . "./$as_me.lineno"
  # Exit status is that of the last command.
  exit
}


if (as_dir=`dirname -- /` && test "X$as_dir" = X/) >/dev/null 2>&1; then
  as_dirname=dirname
else
  as_dirname=false
fi

ECHO_C= ECHO_N= ECHO_T=
case `echo -n x` in
-n*)
  case `echo 'x\c'` in
  *c*) ECHO_T='	';;	# ECHO_T is single tab character.
  *)   ECHO_C='\c';;
  esac;;
*)
  ECHO_N='-n';;
esac

if expr a : '\(a\)' >/dev/null 2>&1 &&
   test "X`expr 00001 : '.*\(...\)'`" = X001; then
  as_expr=expr
else
  as_expr=false
fi

rm -f conf$$ conf$$.exe conf$$.file
if test -d conf$$.dir; then
  rm -f conf$$.dir/conf$$.file
else
  rm -f conf$$.dir
  mkdir conf$$.dir
fi
echo >conf$$.file
if ln -s conf$$.file conf$$ 2>/dev/null; then
  as_ln_s='ln -s'
  # ... but there are two gotchas:
  # 1) On MSYS, both `ln -s file dir' and `ln file dir' fail.
  # 2) DJGPP < 2.04 has no symlinks; `ln -s' creates a wrapper executable.
  # In both cases, we have to default to `cp -p'.
  ln -s conf$$.file conf$$.dir 2>/dev/null && test ! -f conf$$.exe ||
    as_ln_s='cp -p'
elif ln conf$$.file conf$$ 2>/dev/null; then
  as_ln_s=ln
else
  as_ln_s='cp -p'
fi
rm -f conf$$ conf$$.exe conf$$.dir/conf$$.file conf$$.file
rmdir conf$$.dir 2>/dev/null

if mkdir -p . 2>/dev/null; then
  as_mkdir_p=:
else
  test -d ./-p && rmdir ./-p
  as_mkdir_p=false
fi

if test -x / >/dev/null 2>&1; then
  as_test_x='test -x'
else
  if ls -dL / >/dev/null 2>&1; then
    as_ls_L_option=L
  else
    as_ls_L_option=
  fi
  as_test_x='
    eval sh -c '\''
      if test -d "$1"; then
        test -d "$1/.";
      else
	case $1 in
        -*)set "./$1";;
	esac;
	case `ls -ld'$as_ls_L_option' "$1" 2>/dev/null` in
	???[sx]*):;;*)false;;esac;fi
    '\'' sh
  '
fi
as_executable_p=$as_test_x

# Sed expression to map a string onto a valid CPP name.
as_tr_cpp="eval sed 'y%*$as_cr_letters%P$as_cr_LETTERS%;s%[^_$as_cr_alnum]%_%g'"

# Sed expression to map a string onto a valid variable name.
as_tr_sh="eval sed 'y%*+%pp%;s%[^_$as_cr_alnum]%_%g'"



SHELL=${CONFIG_SHELL-/bin/sh}

# How were we run?
at_cli_args="$@"

# Load the config file.
for at_file in atconfig atlocal
do
  test -r $at_file || continue
  . ./$at_file || { echo "$as_me: error: invalid content: $at_file" >&2
   { (exit 1); exit 1; }; }
done

# Autoconf <=2.59b set at_top_builddir instead of at_top_build_prefix:
: ${at_top_build_prefix=$at_top_builddir}

# atconfig delivers names relative to the directory the test suite is
# in, but the groups themselves are run in testsuite-dir/group-dir.
if test -n "$at_top_srcdir"; then
  builddir=../..
  for at_dir in srcdir top_srcdir top_build_prefix
  do
    at_val=`eval echo '${'at_$at_dir'}'`
    eval "$at_dir=\$at_val/../.."
  done
fi

# Not all shells have the 'times' builtin; the subshell is needed to make
# sure we discard the 'times: not found' message from the shell.
at_times_p=false
(times) >/dev/null 2>&1 && at_times_p=:

# CLI Arguments to pass to the debugging scripts.
at_debug_args=
# -e sets to true
at_errexit_p=false
# Shall we be verbose?
at_verbose=:
at_quiet=echo

# Shall we keep the debug scripts?  Must be `:' when the suite is
# run by a debug script, so that the script doesn't remove itself.
at_debug_p=false
# Display help message?
at_help_p=false
# Display the version message?
at_version_p=false
# List test groups?
at_list_p=false
# Test groups to run
at_groups=

# The directory we are in.
at_dir=`pwd`
# The directory the whole suite works in.
# Should be absolutely to let the user `cd' at will.
at_suite_dir=$at_dir/$as_me.dir
# The file containing the suite.
at_suite_log=$at_dir/$as_me.log
# The file containing the location of the last AT_CHECK.
at_check_line_file=$at_suite_dir/at-check-line
# The file containing the exit status of the last command.
at_status_file=$at_suite_dir/at-status
# The files containing the output of the tested commands.
at_stdout=$at_suite_dir/at-stdout
at_stder1=$at_suite_dir/at-stder1
at_stderr=$at_suite_dir/at-stderr
# The file containing dates.
at_times_file=$at_suite_dir/at-times

# List of the tested programs.
at_tested='gst'
# List of the all the test groups.
at_groups_all=' banner-1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 banner-2 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 banner-3 41 42 banner-4 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 banner-5 108 109 110 111 112 113 114 115 116 117 118 119 120'
# As many question marks as there are digits in the last test group number.
# Used to normalize the test group numbers so that `ls' lists them in
# numerical order.
at_format='???'
# Description of all the test groups.
at_help_all="1;testsuite.at:27;arrays.st;base;
2;testsuite.at:28;classes.st;base;
3;testsuite.at:29;blocks.st;base;
4;testsuite.at:30;sets.st;base;
5;testsuite.at:31;processes.st;base;
6;testsuite.at:32;exceptions.st;base;
7;testsuite.at:33;intmath.st;base;
8;testsuite.at:34;floatmath.st;base;
9;testsuite.at:39;dates.st;base;
10;testsuite.at:40;objects.st;base;
11;testsuite.at:41;strings.st;base;
12;testsuite.at:42;chars.st;base;
13;testsuite.at:43;objdump.st;base;
14;testsuite.at:44;delays.st;base;
15;testsuite.at:45;geometry.st;base;
16;testsuite.at:46;cobjects.st;base;
17;testsuite.at:47;compiler.st;base;
18;testsuite.at:48;fileext.st;base;
19;testsuite.at:49;mutate.st;base;
20;testsuite.at:50;untrusted.st;base;
21;testsuite.at:51;getopt.st;base;
22;testsuite.at:52;quit.st;base;
23;testsuite.at:55;ackermann.st;base;
24;testsuite.at:56;ary3.st;base;
25;testsuite.at:57;except.st;base;
26;testsuite.at:58;fibo.st;base;
27;testsuite.at:59;hash.st;base;
28;testsuite.at:60;hash2.st;base;
29;testsuite.at:61;heapsort.st;base;
30;testsuite.at:62;lists.st;base;
31;testsuite.at:63;lists1.st;base;
32;testsuite.at:64;lists2.st;base;
33;testsuite.at:65;matrix.st;base;
34;testsuite.at:66;methcall.st;base;
35;testsuite.at:67;nestedloop.st;base;
36;testsuite.at:68;objinst.st;base;
37;testsuite.at:69;prodcons.st;base;
38;testsuite.at:70;random-bench.st;base;
39;testsuite.at:71;sieve.st;base;
40;testsuite.at:72;strcat.st;base;
41;testsuite.at:75;SUnit;SUnit;
42;testsuite.at:76;Parser;Parser SUnit;
43;testsuite.at:79;ArrayANSITest;ANSI SUnit;
44;testsuite.at:80;ArrayFactoryANSITest;ANSI SUnit;
45;testsuite.at:81;BagANSITest;ANSI SUnit;
46;testsuite.at:82;BagFactoryANSITest;ANSI SUnit;
47;testsuite.at:83;BooleanANSITest;ANSI SUnit;
48;testsuite.at:84;ByteArrayANSITest;ANSI SUnit;
49;testsuite.at:85;ByteArrayFactoryANSITest;ANSI SUnit;
50;testsuite.at:86;CharacterANSITest;ANSI SUnit;
51;testsuite.at:87;CharacterFactoryANSITest;ANSI SUnit;
52;testsuite.at:88;DateAndTimeANSITest;ANSI SUnit;
53;testsuite.at:89;DateAndTimeFactoryANSITest;ANSI SUnit;
54;testsuite.at:90;DictionaryANSITest;ANSI SUnit;
55;testsuite.at:91;DictionaryFactoryANSITest;ANSI SUnit;
56;testsuite.at:92;DurationANSITest;ANSI SUnit;
57;testsuite.at:93;DurationFactoryANSITest;ANSI SUnit;
58;testsuite.at:94;DyadicValuableANSITest;ANSI SUnit;
59;testsuite.at:95;ErrorANSITest;ANSI SUnit;
60;testsuite.at:96;ErrorClassANSITest;ANSI SUnit;
61;testsuite.at:97;ExceptionANSITest;ANSI SUnit;
62;testsuite.at:98;ExceptionClassANSITest;ANSI SUnit;
63;testsuite.at:99;ExceptionSetANSITest;ANSI SUnit;
64;testsuite.at:100;FailedMessageANSITest;ANSI SUnit;
65;testsuite.at:101;FileStreamFactoryANSITest;ANSI SUnit;
66;testsuite.at:102;FloatANSITest;ANSI SUnit;
67;testsuite.at:103;FloatCharacterizationANSITest;ANSI SUnit;
68;testsuite.at:104;FractionANSITest;ANSI SUnit;
69;testsuite.at:105;FractionFactoryANSITest;ANSI SUnit;
70;testsuite.at:106;IdentityDictionaryANSITest;ANSI SUnit;
71;testsuite.at:107;IdentityDictionaryFactoryANSITest;ANSI SUnit;
72;testsuite.at:108;IntegerANSITest;ANSI SUnit;
73;testsuite.at:109;IntervalANSITest;ANSI SUnit;
74;testsuite.at:110;IntervalFactoryANSITest;ANSI SUnit;
75;testsuite.at:111;MessageNotUnderstoodANSITest;ANSI SUnit;
76;testsuite.at:112;MessageNotUnderstoodSelectorANSITest;ANSI SUnit;
77;testsuite.at:113;MonadicBlockANSITest;ANSI SUnit;
78;testsuite.at:114;NilANSITest;ANSI SUnit;
79;testsuite.at:115;NiladicBlockANSITest;ANSI SUnit;
80;testsuite.at:116;NotificationANSITest;ANSI SUnit;
81;testsuite.at:117;NotificationClassANSITest;ANSI SUnit;
82;testsuite.at:118;ObjectANSITest;ANSI SUnit;
83;testsuite.at:119;ObjectClassANSITest;ANSI SUnit;
84;testsuite.at:120;OrderedCollectionANSITest;ANSI SUnit;
85;testsuite.at:121;OrderedCollectionFactoryANSITest;ANSI SUnit;
86;testsuite.at:122;ReadFileStreamANSITest;ANSI SUnit;
87;testsuite.at:123;ReadStreamANSITest;ANSI SUnit;
88;testsuite.at:124;ReadStreamFactoryANSITest;ANSI SUnit;
89;testsuite.at:125;ReadWriteStreamANSITest;ANSI SUnit;
90;testsuite.at:126;ReadWriteStreamFactoryANSITest;ANSI SUnit;
91;testsuite.at:127;ScaledDecimalANSITest;ANSI SUnit;
92;testsuite.at:128;SelectorANSITest;ANSI SUnit;
93;testsuite.at:129;SetANSITest;ANSI SUnit;
94;testsuite.at:130;SetFactoryANSITest;ANSI SUnit;
95;testsuite.at:131;SortedCollectionANSITest;ANSI SUnit;
96;testsuite.at:132;SortedCollectionFactoryANSITest;ANSI SUnit;
97;testsuite.at:133;StringANSITest;ANSI SUnit;
98;testsuite.at:134;StringFactoryANSITest;ANSI SUnit;
99;testsuite.at:135;SymbolANSITest;ANSI SUnit;
100;testsuite.at:136;TranscriptANSITest;ANSI SUnit;
101;testsuite.at:137;WarningANSITest;ANSI SUnit;
102;testsuite.at:138;WarningClassANSITest;ANSI SUnit;
103;testsuite.at:139;WriteFileStreamANSITest;ANSI SUnit;
104;testsuite.at:140;WriteStreamANSITest;ANSI SUnit;
105;testsuite.at:141;WriteStreamFactoryANSITest;ANSI SUnit;
106;testsuite.at:142;ZeroDivideANSITest;ANSI SUnit;
107;testsuite.at:143;ZeroDivideFactoryANSITest;ANSI SUnit;
108;testsuite.at:146;Complex;Complex SUnit;
109;testsuite.at:147;Continuations;Continuations SUnit;
110;testsuite.at:148;DBD-MySQL;DBD-MySQL SUnit;
111;testsuite.at:149;DBD-SQLite;DBD-SQLite SUnit;
112;testsuite.at:150;DebugTools;DebugTools SUnit;
113;testsuite.at:151;DhbNumericalMethods;DhbNumericalMethods SUnit;
114;testsuite.at:152;Digest;Digest SUnit;
115;testsuite.at:153;GDBM;GDBM SUnit;
116;testsuite.at:154;Iconv;Iconv SUnit;
117;testsuite.at:155;ROE;ROE SUnit;
118;testsuite.at:156;Sport;Sport SUnit;
119;testsuite.at:157;Swazoo;Swazoo SUnit;
120;testsuite.at:158;ZLib;ZLib SUnit;
"

at_prev=
for at_option
do
  # If the previous option needs an argument, assign it.
  if test -n "$at_prev"; then
    at_option=$at_prev=$at_option
    at_prev=
  fi

  case $at_option in
  *=*) at_optarg=`expr "x$at_option" : 'x[^=]*=\(.*\)'` ;;
  *)   at_optarg= ;;
  esac

  # Accept the important Cygnus configure options, so we can diagnose typos.

  case $at_option in
    --help | -h )
	at_help_p=:
	;;

    --list | -l )
	at_list_p=:
	;;

    --version | -V )
	at_version_p=:
	;;

    --clean | -c )
	test -d "$at_suite_dir" &&
	  find "$at_suite_dir" -type d ! -perm -700 -exec chmod u+rwx \{\} \;
	rm -f -r "$at_suite_dir" "$at_suite_log"
	exit 0
	;;

    --debug | -d )
	at_debug_p=:
	;;

    --errexit | -e )
	at_debug_p=:
	at_errexit_p=:
	;;

    --verbose | -v )
	at_verbose=echo; at_quiet=:
	;;

    --trace | -x )
	at_traceon='set -x'; at_traceoff='set +x'
	;;

    [0-9] | [0-9][0-9] | [0-9][0-9][0-9] | [0-9][0-9][0-9][0-9])
	at_groups="$at_groups$at_option "
	;;

    # Ranges
    [0-9]- | [0-9][0-9]- | [0-9][0-9][0-9]- | [0-9][0-9][0-9][0-9]-)
	at_range_start=`echo $at_option |tr -d X-`
	at_range=`echo " $at_groups_all " | \
	  sed -e 's/^.* \('$at_range_start' \)/\1/'`
	at_groups="$at_groups$at_range "
	;;

    -[0-9] | -[0-9][0-9] | -[0-9][0-9][0-9] | -[0-9][0-9][0-9][0-9])
	at_range_end=`echo $at_option |tr -d X-`
	at_range=`echo " $at_groups_all " | \
	  sed -e 's/\( '$at_range_end'\) .*$/\1/'`
	at_groups="$at_groups$at_range "
	;;

    [0-9]-[0-9] | [0-9]-[0-9][0-9] | [0-9]-[0-9][0-9][0-9] | \
    [0-9]-[0-9][0-9][0-9][0-9] | [0-9][0-9]-[0-9][0-9] | \
    [0-9][0-9]-[0-9][0-9][0-9] | [0-9][0-9]-[0-9][0-9][0-9][0-9] | \
    [0-9][0-9][0-9]-[0-9][0-9][0-9] | \
    [0-9][0-9][0-9]-[0-9][0-9][0-9][0-9] | \
    [0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9] )
	at_range_start=`expr $at_option : '\(.*\)-'`
	at_range_end=`expr $at_option : '.*-\(.*\)'`
	if test $at_range_start -gt $at_range_end; then
	  at_tmp=$at_range_end
	  at_range_end=$at_range_start
	  at_range_start=$at_tmp
	fi
	at_range=`echo " $at_groups_all " | \
	  sed -e 's/^.*\( '$at_range_start' \)/\1/' \
	      -e 's/\( '$at_range_end'\) .*$/\1/'`
	at_groups="$at_groups$at_range "
	;;

    # Keywords.
    --keywords | -k )
	at_prev=--keywords
	;;
    --keywords=* )
	at_groups_selected=$at_help_all
	at_save_IFS=$IFS
	IFS=,
	set X $at_optarg
	shift
	IFS=$at_save_IFS
	for at_keyword
	do
	  at_invert=
	  case $at_keyword in
	  '!'*)
	    at_invert="-v"
	    at_keyword=`expr "X$at_keyword" : 'X!\(.*\)'`
	    ;;
	  esac
	  # It is on purpose that we match the test group titles too.
	  at_groups_selected=`echo "$at_groups_selected" |
	      grep -i $at_invert "^[1-9][^;]*;.*[; ]$at_keyword[ ;]"`
	done
	at_groups_selected=`echo "$at_groups_selected" | sed 's/;.*//'`
	# Smash the newlines.
	at_groups="$at_groups`echo $at_groups_selected` "
	;;

    *=*)
	at_envvar=`expr "x$at_option" : 'x\([^=]*\)='`
	# Reject names that are not valid shell variable names.
	expr "x$at_envvar" : ".*[^_$as_cr_alnum]" >/dev/null &&
	  { echo "$as_me: error: invalid variable name: $at_envvar" >&2
   { (exit 1); exit 1; }; }
	at_value=`echo "$at_optarg" | sed "s/'/'\\\\\\\\''/g"`
	eval "$at_envvar='$at_value'"
	export $at_envvar
	# Propagate to debug scripts.
	at_debug_args="$at_debug_args $at_envvar='$at_value'"
	;;

     *) echo "$as_me: invalid option: $at_option" >&2
	echo "Try \`$0 --help' for more information." >&2
	exit 1
	;;
  esac
done

# Selected test groups.
if test -z "$at_groups"; then
  at_groups=$at_groups_all
else
  # Sort the tests, removing duplicates:
  at_groups=`echo $at_groups | tr ' ' "$as_nl" | sort -nu`
  # and add banners.  (Passing at_groups_all is tricky--see the comment
  # starting with "Passing at_groups is tricky.")
  at_groups=`echo "$at_groups$as_nl $at_groups_all" |
    awk 'BEGIN { FS = "@" } # Effectively switch off field splitting.
	/^$/ { next }  # Ignore the empty line.
	!/ / { groups++; selected[$ 0] = 1; next }
	# The last line, containing at_groups_all.
	{
		n = split($ 0, a, " ")
		# If there are several tests, select their banners:
		if (groups > 1) {
			for (i = 1; i <= n; i++) {
				if (a[i] ~ /^banner-/)
					banner = a[i]
				else if (banner != "" && selected[a[i]] == 1)
					selected[banner] = 1
			}
		}
		for (i = 1; i <= n; i++)
			if (selected[a[i]] == 1)
				list = list " " a[i]
		print list
	}'`
fi

# Help message.
if $at_help_p; then
  cat <<_ATEOF
Usage: $0 [OPTION]... [VARIABLE=VALUE]... [TESTS]

Run all the tests, or the selected TESTS, given by numeric ranges, and
save a detailed log file.  Upon failure, create debugging scripts.

You should not change environment variables unless explicitly passed
as command line arguments.  Set \`AUTOTEST_PATH' to select the executables
to exercise.  Each relative directory is expanded as build and source
directories relatively to the top level of this distribution.  E.g.,

  $ $0 AUTOTEST_PATH=bin

possibly amounts into

  PATH=/tmp/foo-1.0/bin:/src/foo-1.0/bin:\$PATH
_ATEOF
cat <<_ATEOF

Operation modes:
  -h, --help     print the help message, then exit
  -V, --version  print version number, then exit
  -c, --clean    remove all the files this test suite might create and exit
  -l, --list     describes all the tests, or the selected TESTS
_ATEOF
cat <<_ATEOF

Execution tuning:
  -k, --keywords=KEYWORDS
	         select the tests matching all the comma-separated KEYWORDS
	         multiple \`-k' accumulate; prefixed \`!' negates a KEYWORD
  -e, --errexit  abort as soon as a test fails; implies --debug
  -v, --verbose  force more detailed output
	         default for debugging scripts
  -d, --debug    inhibit clean up and top-level logging
	         default for debugging scripts
  -x, --trace    enable tests shell tracing
_ATEOF
cat <<_ATEOF

Report bugs to <help-smalltalk@gnu.org>.
_ATEOF
  exit 0
fi

# List of tests.
if $at_list_p; then
  cat <<_ATEOF
GNU Smalltalk 3.0 test suite test groups:

 NUM: FILE-NAME:LINE     TEST-GROUP-NAME
      KEYWORDS

_ATEOF
  # Passing at_groups is tricky.  We cannot use it to form a literal string
  # or regexp because of the limitation of AIX awk.  And Solaris' awk
  # doesn't grok more than 99 fields in a record, so we have to use `split'.
  echo "$at_groups$as_nl$at_help_all" |
    awk 'BEGIN { FS = ";" }
	 NR == 1 {
	   for (n = split($ 0, a, " "); n; n--) selected[a[n]] = 1
	   next
	 }
	 {
	   if (selected[$ 1]) {
	     printf " %3d: %-18s %s\n", $ 1, $ 2, $ 3
	     if ($ 4) printf "      %s\n", $ 4
	   }
	 }'
  exit 0
fi
if $at_version_p; then
  echo "$as_me (GNU Smalltalk 3.0)"
  cat <<\_ACEOF

Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006 Free Software
Foundation, Inc.
This test suite is free software; the Free Software Foundation gives
unlimited permission to copy, distribute and modify it.
_ACEOF
  exit 0
fi

# Don't take risks: use only absolute directories in PATH.
#
# For stand-alone test suites, AUTOTEST_PATH is relative to `.'.
#
# For embedded test suites, AUTOTEST_PATH is relative to the top level
# of the package.  Then expand it into build/src parts, since users
# may create executables in both places.
AUTOTEST_PATH=`echo $AUTOTEST_PATH | sed "s&:&$PATH_SEPARATOR&g"`
at_path=
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $AUTOTEST_PATH $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  test -n "$at_path" && at_path=$at_path$PATH_SEPARATOR
case $as_dir in
  [\\/]* | ?:[\\/]* )
    at_path=$at_path$as_dir
    ;;
  * )
    if test -z "$at_top_build_prefix"; then
      # Stand-alone test suite.
      at_path=$at_path$as_dir
    else
      # Embedded test suite.
      at_path=$at_path$at_top_build_prefix$as_dir$PATH_SEPARATOR
      at_path=$at_path$at_top_srcdir/$as_dir
    fi
    ;;
esac
done
IFS=$as_save_IFS


# Now build and simplify PATH.
#
# There might be directories that don't exist, but don't redirect
# builtins' (eg., cd) stderr directly: Ultrix's sh hates that.
PATH=
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $at_path
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  as_dir=`(cd "$as_dir" && pwd) 2>/dev/null`
test -d "$as_dir" || continue
case $PATH in
	          $as_dir                 | \
	          $as_dir$PATH_SEPARATOR* | \
  *$PATH_SEPARATOR$as_dir                 | \
  *$PATH_SEPARATOR$as_dir$PATH_SEPARATOR* ) ;;

  '') PATH=$as_dir ;;
   *) PATH=$PATH$PATH_SEPARATOR$as_dir ;;
esac
done
IFS=$as_save_IFS

export PATH

# Setting up the FDs.
# 5 is the log file.  Not to be overwritten if `-d'.

if $at_debug_p; then
  at_suite_log=/dev/null
else
  : >"$at_suite_log"
fi
exec 5>>"$at_suite_log"

# Banners and logs.
cat <<\_ASBOX
## ----------------------------- ##
## GNU Smalltalk 3.0 test suite. ##
## ----------------------------- ##
_ASBOX
{
  cat <<\_ASBOX
## ----------------------------- ##
## GNU Smalltalk 3.0 test suite. ##
## ----------------------------- ##
_ASBOX
  echo

  echo "$as_me: command line was:"
  echo "  $ $0 $at_cli_args"
  echo

  # Try to find a few ChangeLogs in case it might help determining the
  # exact version.  Use the relative dir: if the top dir is a symlink,
  # find will not follow it (and options to follow the links are not
  # portable), which would result in no output here.
  if test -n "$at_top_srcdir"; then
    cat <<\_ASBOX
## ----------- ##
## ChangeLogs. ##
## ----------- ##
_ASBOX
    echo
    for at_file in `find "$at_top_srcdir" -name ChangeLog -print`
    do
      echo "$as_me: $at_file:"
      sed 's/^/| /;10q' $at_file
      echo
    done

    {
cat <<_ASUNAME
## --------- ##
## Platform. ##
## --------- ##

hostname = `(hostname || uname -n) 2>/dev/null | sed 1q`
uname -m = `(uname -m) 2>/dev/null || echo unknown`
uname -r = `(uname -r) 2>/dev/null || echo unknown`
uname -s = `(uname -s) 2>/dev/null || echo unknown`
uname -v = `(uname -v) 2>/dev/null || echo unknown`

/usr/bin/uname -p = `(/usr/bin/uname -p) 2>/dev/null || echo unknown`
/bin/uname -X     = `(/bin/uname -X) 2>/dev/null     || echo unknown`

/bin/arch              = `(/bin/arch) 2>/dev/null              || echo unknown`
/usr/bin/arch -k       = `(/usr/bin/arch -k) 2>/dev/null       || echo unknown`
/usr/convex/getsysinfo = `(/usr/convex/getsysinfo) 2>/dev/null || echo unknown`
/usr/bin/hostinfo      = `(/usr/bin/hostinfo) 2>/dev/null      || echo unknown`
/bin/machine           = `(/bin/machine) 2>/dev/null           || echo unknown`
/usr/bin/oslevel       = `(/usr/bin/oslevel) 2>/dev/null       || echo unknown`
/bin/universe          = `(/bin/universe) 2>/dev/null          || echo unknown`

_ASUNAME

as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  echo "PATH: $as_dir"
done
IFS=$as_save_IFS

}
    echo
  fi

  # Contents of the config files.
  for at_file in atconfig atlocal
  do
    test -r $at_file || continue
    echo "$as_me: $at_file:"
    sed 's/^/| /' $at_file
    echo
  done

  cat <<\_ASBOX
## ---------------- ##
## Tested programs. ##
## ---------------- ##
_ASBOX
  echo
} >&5

# Report what programs are being tested.
for at_program in : $at_tested
do
  test "$at_program" = : && continue
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  test -f "$as_dir/$at_program" && break
done
IFS=$as_save_IFS

  if test -f "$as_dir/$at_program"; then
    {
      echo "$at_srcdir/testsuite.at:23: $as_dir/$at_program --version"
      "$as_dir/$at_program" --version
      echo
    } >&5 2>&1
  else
    { { echo "$as_me:$LINENO: error: cannot find $at_program" >&5
echo "$as_me: error: cannot find $at_program" >&2;}
   { (exit 1); exit 1; }; }
  fi
done

{
  cat <<\_ASBOX
## ------------------ ##
## Running the tests. ##
## ------------------ ##
_ASBOX
} >&5

at_start_date=`date`
at_start_time=`date +%s 2>/dev/null`
echo "$as_me: starting at: $at_start_date" >&5
at_xpass_list=
at_xfail_list=
at_pass_list=
at_fail_list=
at_skip_list=
at_group_count=0

# Create the master directory if it doesn't already exist.
test -d "$at_suite_dir" ||
  mkdir "$at_suite_dir" ||
  { { echo "$as_me:$LINENO: error: cannot create '$at_suite_dir'" >&5
echo "$as_me: error: cannot create '$at_suite_dir'" >&2;}
   { (exit 1); exit 1; }; }

# Can we diff with `/dev/null'?  DU 5.0 refuses.
if diff /dev/null /dev/null >/dev/null 2>&1; then
  at_devnull=/dev/null
else
  at_devnull=$at_suite_dir/devnull
  >"$at_devnull"
fi

# Use `diff -u' when possible.
if at_diff=`diff -u "$at_devnull" "$at_devnull" 2>&1` && test -z "$at_diff"
then
  at_diff='diff -u'
else
  at_diff=diff
fi


for at_group in $at_groups
do
  # Be sure to come back to the top test directory.
  cd "$at_suite_dir"

  case $at_group in
    banner-*)
      at_group_log=$at_suite_log
      ;;

    *)
      at_group_normalized=$at_group

  while :; do
    case $at_group_normalized in #(
    $at_format*) break;;
    esac
    at_group_normalized=0$at_group_normalized
  done


      # Create a fresh directory for the next test group, and enter.
      at_group_dir=$at_suite_dir/$at_group_normalized
      at_group_log=$at_group_dir/$as_me.log
      if test -d "$at_group_dir"; then
	find "$at_group_dir" -type d ! -perm -700 -exec chmod u+rwx \{\} \;
	rm -fr "$at_group_dir"
      fi
      # Be tolerant if the above `rm' was not able to remove the directory.
      { as_dir=$at_group_dir
  case $as_dir in #(
  -*) as_dir=./$as_dir;;
  esac
  test -d "$as_dir" || { $as_mkdir_p && mkdir -p "$as_dir"; } || {
    as_dirs=
    while :; do
      case $as_dir in #(
      *\'*) as_qdir=`echo "$as_dir" | sed "s/'/'\\\\\\\\''/g"`;; #(
      *) as_qdir=$as_dir;;
      esac
      as_dirs="'$as_qdir' $as_dirs"
      as_dir=`$as_dirname -- "$as_dir" ||
$as_expr X"$as_dir" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
	 X"$as_dir" : 'X\(//\)[^/]' \| \
	 X"$as_dir" : 'X\(//\)$' \| \
	 X"$as_dir" : 'X\(/\)' \| . 2>/dev/null ||
echo X"$as_dir" |
    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)[^/].*/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`
      test -d "$as_dir" && break
    done
    test -z "$as_dirs" || eval "mkdir $as_dirs"
  } || test -d "$as_dir" || { { echo "$as_me:$LINENO: error: cannot create directory $as_dir" >&5
echo "$as_me: error: cannot create directory $as_dir" >&2;}
   { (exit 1); exit 1; }; }; }
      cd $at_group_dir
      ;;
  esac

  echo 0 > "$at_status_file"

  # Clearly separate the test groups when verbose.
  test $at_group_count != 0 && $at_verbose

  # In verbose mode, append to the log file *and* show on
  # the standard output; in quiet mode only write to the log
  if test $at_verbose = echo; then
    at_tee_pipe='tee -a "$at_group_log"'
  else
    at_tee_pipe='cat >> "$at_group_log"'
  fi

  case $at_group in

  banner-1 ) # Banner 1. testsuite.at:26
    cat <<\_ATEOF

Regression tests.

_ATEOF
    ;;

  1 ) # 1. testsuite.at:27: arrays.st
    at_setup_line='testsuite.at:27'
    at_desc="arrays.st"
    $at_quiet $ECHO_N "  1: arrays.st                                      $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "1. testsuite.at:27: testing ..."
      $at_traceon



  cat $abs_srcdir/arrays.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r arrays.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:27: { (cd \$abs_srcdir && gst \$image_path -r arrays.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:27 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r arrays.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r arrays.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r arrays.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:27: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  2 ) # 2. testsuite.at:28: classes.st
    at_setup_line='testsuite.at:28'
    at_desc="classes.st"
    $at_quiet $ECHO_N "  2: classes.st                                     $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "2. testsuite.at:28: testing ..."
      $at_traceon



  cat $abs_srcdir/classes.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r classes.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:28: { (cd \$abs_srcdir && gst \$image_path -r classes.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:28 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r classes.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r classes.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r classes.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:28: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  3 ) # 3. testsuite.at:29: blocks.st
    at_setup_line='testsuite.at:29'
    at_desc="blocks.st"
    $at_quiet $ECHO_N "  3: blocks.st                                      $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "3. testsuite.at:29: testing ..."
      $at_traceon



  cat $abs_srcdir/blocks.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r blocks.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:29: { (cd \$abs_srcdir && gst \$image_path -r blocks.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:29 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r blocks.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r blocks.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r blocks.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:29: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  4 ) # 4. testsuite.at:30: sets.st
    at_setup_line='testsuite.at:30'
    at_desc="sets.st"
    $at_quiet $ECHO_N "  4: sets.st                                        $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "4. testsuite.at:30: testing ..."
      $at_traceon



  cat $abs_srcdir/sets.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r sets.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:30: { (cd \$abs_srcdir && gst \$image_path -r sets.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:30 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r sets.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r sets.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r sets.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:30: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  5 ) # 5. testsuite.at:31: processes.st
    at_setup_line='testsuite.at:31'
    at_desc="processes.st"
    $at_quiet $ECHO_N "  5: processes.st                                   $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "5. testsuite.at:31: testing ..."
      $at_traceon



  cat $abs_srcdir/processes.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r processes.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:31: { (cd \$abs_srcdir && gst \$image_path -r processes.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:31 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r processes.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r processes.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r processes.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:31: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  6 ) # 6. testsuite.at:32: exceptions.st
    at_setup_line='testsuite.at:32'
    at_desc="exceptions.st"
    $at_quiet $ECHO_N "  6: exceptions.st                                  $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "6. testsuite.at:32: testing ..."
      $at_traceon



  cat $abs_srcdir/exceptions.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r exceptions.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:32: { (cd \$abs_srcdir && gst \$image_path -r exceptions.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:32 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r exceptions.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r exceptions.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r exceptions.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:32: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  7 ) # 7. testsuite.at:33: intmath.st
    at_setup_line='testsuite.at:33'
    at_desc="intmath.st"
    $at_quiet $ECHO_N "  7: intmath.st                                     $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "7. testsuite.at:33: testing ..."
      $at_traceon



  cat $abs_srcdir/intmath.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r intmath.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:33: { (cd \$abs_srcdir && gst \$image_path -r intmath.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:33 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r intmath.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r intmath.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r intmath.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:33: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  8 ) # 8. testsuite.at:34: floatmath.st
    at_setup_line='testsuite.at:34'
    at_desc="floatmath.st"
    $at_quiet $ECHO_N "  8: floatmath.st                                   $ECHO_C"
    at_xfail=no

  case "$host" in
    alpha*-*-*) : ;;
    *) (exit 1) ;;
  esac && at_xfail=yes
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "8. testsuite.at:34: testing ..."
      $at_traceon



  cat $abs_srcdir/floatmath.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r floatmath.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:34: { (cd \$abs_srcdir && gst \$image_path -r floatmath.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:34 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r floatmath.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r floatmath.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r floatmath.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:34: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  9 ) # 9. testsuite.at:39: dates.st
    at_setup_line='testsuite.at:39'
    at_desc="dates.st"
    $at_quiet $ECHO_N "  9: dates.st                                       $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "9. testsuite.at:39: testing ..."
      $at_traceon



  cat $abs_srcdir/dates.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r dates.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:39: { (cd \$abs_srcdir && gst \$image_path -r dates.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:39 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r dates.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r dates.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r dates.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:39: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  10 ) # 10. testsuite.at:40: objects.st
    at_setup_line='testsuite.at:40'
    at_desc="objects.st"
    $at_quiet $ECHO_N " 10: objects.st                                     $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "10. testsuite.at:40: testing ..."
      $at_traceon



  cat $abs_srcdir/objects.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r objects.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:40: { (cd \$abs_srcdir && gst \$image_path -r objects.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:40 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r objects.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r objects.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r objects.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:40: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  11 ) # 11. testsuite.at:41: strings.st
    at_setup_line='testsuite.at:41'
    at_desc="strings.st"
    $at_quiet $ECHO_N " 11: strings.st                                     $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "11. testsuite.at:41: testing ..."
      $at_traceon



  cat $abs_srcdir/strings.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r strings.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:41: { (cd \$abs_srcdir && gst \$image_path -r strings.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:41 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r strings.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r strings.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r strings.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:41: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  12 ) # 12. testsuite.at:42: chars.st
    at_setup_line='testsuite.at:42'
    at_desc="chars.st"
    $at_quiet $ECHO_N " 12: chars.st                                       $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "12. testsuite.at:42: testing ..."
      $at_traceon



  cat $abs_srcdir/chars.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r chars.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:42: { (cd \$abs_srcdir && gst \$image_path -r chars.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:42 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r chars.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r chars.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r chars.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:42: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  13 ) # 13. testsuite.at:43: objdump.st
    at_setup_line='testsuite.at:43'
    at_desc="objdump.st"
    $at_quiet $ECHO_N " 13: objdump.st                                     $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "13. testsuite.at:43: testing ..."
      $at_traceon



  cat $abs_srcdir/objdump.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r objdump.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:43: { (cd \$abs_srcdir && gst \$image_path -r objdump.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:43 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r objdump.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r objdump.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r objdump.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:43: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  14 ) # 14. testsuite.at:44: delays.st
    at_setup_line='testsuite.at:44'
    at_desc="delays.st"
    $at_quiet $ECHO_N " 14: delays.st                                      $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "14. testsuite.at:44: testing ..."
      $at_traceon



  cat $abs_srcdir/delays.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r delays.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:44: { (cd \$abs_srcdir && gst \$image_path -r delays.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:44 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r delays.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r delays.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r delays.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:44: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  15 ) # 15. testsuite.at:45: geometry.st
    at_setup_line='testsuite.at:45'
    at_desc="geometry.st"
    $at_quiet $ECHO_N " 15: geometry.st                                    $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "15. testsuite.at:45: testing ..."
      $at_traceon



  cat $abs_srcdir/geometry.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r geometry.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:45: { (cd \$abs_srcdir && gst \$image_path -r geometry.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:45 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r geometry.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r geometry.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r geometry.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:45: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  16 ) # 16. testsuite.at:46: cobjects.st
    at_setup_line='testsuite.at:46'
    at_desc="cobjects.st"
    $at_quiet $ECHO_N " 16: cobjects.st                                    $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "16. testsuite.at:46: testing ..."
      $at_traceon



  cat $abs_srcdir/cobjects.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r cobjects.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:46: { (cd \$abs_srcdir && gst \$image_path -r cobjects.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:46 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r cobjects.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r cobjects.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r cobjects.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:46: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  17 ) # 17. testsuite.at:47: compiler.st
    at_setup_line='testsuite.at:47'
    at_desc="compiler.st"
    $at_quiet $ECHO_N " 17: compiler.st                                    $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "17. testsuite.at:47: testing ..."
      $at_traceon



  cat $abs_srcdir/compiler.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r compiler.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:47: { (cd \$abs_srcdir && gst \$image_path -r compiler.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:47 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r compiler.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r compiler.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r compiler.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:47: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  18 ) # 18. testsuite.at:48: fileext.st
    at_setup_line='testsuite.at:48'
    at_desc="fileext.st"
    $at_quiet $ECHO_N " 18: fileext.st                                     $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "18. testsuite.at:48: testing ..."
      $at_traceon



  cat $abs_srcdir/fileext.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r fileext.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:48: { (cd \$abs_srcdir && gst \$image_path -r fileext.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:48 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r fileext.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r fileext.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r fileext.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:48: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  19 ) # 19. testsuite.at:49: mutate.st
    at_setup_line='testsuite.at:49'
    at_desc="mutate.st"
    $at_quiet $ECHO_N " 19: mutate.st                                      $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "19. testsuite.at:49: testing ..."
      $at_traceon



  cat $abs_srcdir/mutate.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r mutate.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:49: { (cd \$abs_srcdir && gst \$image_path -r mutate.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:49 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r mutate.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r mutate.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r mutate.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:49: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  20 ) # 20. testsuite.at:50: untrusted.st
    at_setup_line='testsuite.at:50'
    at_desc="untrusted.st"
    $at_quiet $ECHO_N " 20: untrusted.st                                   $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "20. testsuite.at:50: testing ..."
      $at_traceon



  cat $abs_srcdir/untrusted.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r untrusted.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:50: { (cd \$abs_srcdir && gst \$image_path -r untrusted.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:50 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r untrusted.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r untrusted.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r untrusted.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:50: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  21 ) # 21. testsuite.at:51: getopt.st
    at_setup_line='testsuite.at:51'
    at_desc="getopt.st"
    $at_quiet $ECHO_N " 21: getopt.st                                      $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "21. testsuite.at:51: testing ..."
      $at_traceon



  cat $abs_srcdir/getopt.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r getopt.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:51: { (cd \$abs_srcdir && gst \$image_path -r getopt.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:51 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r getopt.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r getopt.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r getopt.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:51: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  22 ) # 22. testsuite.at:52: quit.st
    at_setup_line='testsuite.at:52'
    at_desc="quit.st"
    $at_quiet $ECHO_N " 22: quit.st                                        $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "22. testsuite.at:52: testing ..."
      $at_traceon



  cat $abs_srcdir/quit.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r quit.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:52: { (cd \$abs_srcdir && gst \$image_path -r quit.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:52 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r quit.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r quit.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r quit.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:52: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;


  banner-2 ) # Banner 2. testsuite.at:54
    cat <<\_ATEOF

Other simple tests.

_ATEOF
    ;;

  23 ) # 23. testsuite.at:55: ackermann.st
    at_setup_line='testsuite.at:55'
    at_desc="ackermann.st"
    $at_quiet $ECHO_N " 23: ackermann.st                                   $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "23. testsuite.at:55: testing ..."
      $at_traceon



  cat $abs_srcdir/ackermann.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r ackermann.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:55: { (cd \$abs_srcdir && gst \$image_path -r ackermann.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:55 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r ackermann.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r ackermann.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r ackermann.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:55: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  24 ) # 24. testsuite.at:56: ary3.st
    at_setup_line='testsuite.at:56'
    at_desc="ary3.st"
    $at_quiet $ECHO_N " 24: ary3.st                                        $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "24. testsuite.at:56: testing ..."
      $at_traceon



  cat $abs_srcdir/ary3.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r ary3.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:56: { (cd \$abs_srcdir && gst \$image_path -r ary3.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:56 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r ary3.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r ary3.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r ary3.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:56: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  25 ) # 25. testsuite.at:57: except.st
    at_setup_line='testsuite.at:57'
    at_desc="except.st"
    $at_quiet $ECHO_N " 25: except.st                                      $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "25. testsuite.at:57: testing ..."
      $at_traceon



  cat $abs_srcdir/except.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r except.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:57: { (cd \$abs_srcdir && gst \$image_path -r except.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:57 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r except.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r except.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r except.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:57: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  26 ) # 26. testsuite.at:58: fibo.st
    at_setup_line='testsuite.at:58'
    at_desc="fibo.st"
    $at_quiet $ECHO_N " 26: fibo.st                                        $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "26. testsuite.at:58: testing ..."
      $at_traceon



  cat $abs_srcdir/fibo.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r fibo.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:58: { (cd \$abs_srcdir && gst \$image_path -r fibo.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:58 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r fibo.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r fibo.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r fibo.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:58: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  27 ) # 27. testsuite.at:59: hash.st
    at_setup_line='testsuite.at:59'
    at_desc="hash.st"
    $at_quiet $ECHO_N " 27: hash.st                                        $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "27. testsuite.at:59: testing ..."
      $at_traceon



  cat $abs_srcdir/hash.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r hash.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:59: { (cd \$abs_srcdir && gst \$image_path -r hash.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:59 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r hash.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r hash.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r hash.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:59: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  28 ) # 28. testsuite.at:60: hash2.st
    at_setup_line='testsuite.at:60'
    at_desc="hash2.st"
    $at_quiet $ECHO_N " 28: hash2.st                                       $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "28. testsuite.at:60: testing ..."
      $at_traceon



  cat $abs_srcdir/hash2.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r hash2.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:60: { (cd \$abs_srcdir && gst \$image_path -r hash2.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:60 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r hash2.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r hash2.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r hash2.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:60: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  29 ) # 29. testsuite.at:61: heapsort.st
    at_setup_line='testsuite.at:61'
    at_desc="heapsort.st"
    $at_quiet $ECHO_N " 29: heapsort.st                                    $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "29. testsuite.at:61: testing ..."
      $at_traceon



  cat $abs_srcdir/heapsort.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r heapsort.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:61: { (cd \$abs_srcdir && gst \$image_path -r heapsort.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:61 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r heapsort.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r heapsort.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r heapsort.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:61: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  30 ) # 30. testsuite.at:62: lists.st
    at_setup_line='testsuite.at:62'
    at_desc="lists.st"
    $at_quiet $ECHO_N " 30: lists.st                                       $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "30. testsuite.at:62: testing ..."
      $at_traceon



  cat $abs_srcdir/lists.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r lists.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:62: { (cd \$abs_srcdir && gst \$image_path -r lists.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:62 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r lists.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r lists.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r lists.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:62: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  31 ) # 31. testsuite.at:63: lists1.st
    at_setup_line='testsuite.at:63'
    at_desc="lists1.st"
    $at_quiet $ECHO_N " 31: lists1.st                                      $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "31. testsuite.at:63: testing ..."
      $at_traceon



  cat $abs_srcdir/lists1.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r lists1.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:63: { (cd \$abs_srcdir && gst \$image_path -r lists1.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:63 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r lists1.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r lists1.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r lists1.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:63: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  32 ) # 32. testsuite.at:64: lists2.st
    at_setup_line='testsuite.at:64'
    at_desc="lists2.st"
    $at_quiet $ECHO_N " 32: lists2.st                                      $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "32. testsuite.at:64: testing ..."
      $at_traceon



  cat $abs_srcdir/lists2.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r lists2.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:64: { (cd \$abs_srcdir && gst \$image_path -r lists2.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:64 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r lists2.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r lists2.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r lists2.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:64: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  33 ) # 33. testsuite.at:65: matrix.st
    at_setup_line='testsuite.at:65'
    at_desc="matrix.st"
    $at_quiet $ECHO_N " 33: matrix.st                                      $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "33. testsuite.at:65: testing ..."
      $at_traceon



  cat $abs_srcdir/matrix.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r matrix.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:65: { (cd \$abs_srcdir && gst \$image_path -r matrix.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:65 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r matrix.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r matrix.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r matrix.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:65: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  34 ) # 34. testsuite.at:66: methcall.st
    at_setup_line='testsuite.at:66'
    at_desc="methcall.st"
    $at_quiet $ECHO_N " 34: methcall.st                                    $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "34. testsuite.at:66: testing ..."
      $at_traceon



  cat $abs_srcdir/methcall.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r methcall.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:66: { (cd \$abs_srcdir && gst \$image_path -r methcall.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:66 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r methcall.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r methcall.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r methcall.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:66: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  35 ) # 35. testsuite.at:67: nestedloop.st
    at_setup_line='testsuite.at:67'
    at_desc="nestedloop.st"
    $at_quiet $ECHO_N " 35: nestedloop.st                                  $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "35. testsuite.at:67: testing ..."
      $at_traceon



  cat $abs_srcdir/nestedloop.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r nestedloop.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:67: { (cd \$abs_srcdir && gst \$image_path -r nestedloop.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:67 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r nestedloop.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r nestedloop.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r nestedloop.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:67: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  36 ) # 36. testsuite.at:68: objinst.st
    at_setup_line='testsuite.at:68'
    at_desc="objinst.st"
    $at_quiet $ECHO_N " 36: objinst.st                                     $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "36. testsuite.at:68: testing ..."
      $at_traceon



  cat $abs_srcdir/objinst.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r objinst.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:68: { (cd \$abs_srcdir && gst \$image_path -r objinst.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:68 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r objinst.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r objinst.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r objinst.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:68: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  37 ) # 37. testsuite.at:69: prodcons.st
    at_setup_line='testsuite.at:69'
    at_desc="prodcons.st"
    $at_quiet $ECHO_N " 37: prodcons.st                                    $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "37. testsuite.at:69: testing ..."
      $at_traceon



  cat $abs_srcdir/prodcons.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r prodcons.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:69: { (cd \$abs_srcdir && gst \$image_path -r prodcons.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:69 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r prodcons.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r prodcons.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r prodcons.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:69: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  38 ) # 38. testsuite.at:70: random-bench.st
    at_setup_line='testsuite.at:70'
    at_desc="random-bench.st"
    $at_quiet $ECHO_N " 38: random-bench.st                                $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "38. testsuite.at:70: testing ..."
      $at_traceon



  cat $abs_srcdir/random-bench.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r random-bench.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:70: { (cd \$abs_srcdir && gst \$image_path -r random-bench.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:70 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r random-bench.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r random-bench.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r random-bench.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:70: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  39 ) # 39. testsuite.at:71: sieve.st
    at_setup_line='testsuite.at:71'
    at_desc="sieve.st"
    $at_quiet $ECHO_N " 39: sieve.st                                       $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "39. testsuite.at:71: testing ..."
      $at_traceon



  cat $abs_srcdir/sieve.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r sieve.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:71: { (cd \$abs_srcdir && gst \$image_path -r sieve.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:71 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r sieve.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r sieve.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r sieve.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:71: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  40 ) # 40. testsuite.at:72: strcat.st
    at_setup_line='testsuite.at:72'
    at_desc="strcat.st"
    $at_quiet $ECHO_N " 40: strcat.st                                      $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "40. testsuite.at:72: testing ..."
      $at_traceon



  cat $abs_srcdir/strcat.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r strcat.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:72: { (cd \$abs_srcdir && gst \$image_path -r strcat.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:72 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_srcdir && gst $image_path -r strcat.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r strcat.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_srcdir && gst $image_path -r strcat.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:72: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;


  banner-3 ) # Banner 3. testsuite.at:74
    cat <<\_ATEOF

Basic packages.

_ATEOF
    ;;

  41 ) # 41. testsuite.at:75: SUnit
    at_setup_line='testsuite.at:75'
    at_desc="SUnit"
    $at_quiet $ECHO_N " 41: SUnit                                          $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "41. testsuite.at:75: testing ..."
      $at_traceon





  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p SUnit); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:75: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_top_srcdir/scripts/Test.st --verbose  -p SUnit); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:75 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p SUnit); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p SUnit); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p SUnit); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:75: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  42 ) # 42. testsuite.at:76: Parser
    at_setup_line='testsuite.at:76'
    at_desc="Parser"
    $at_quiet $ECHO_N " 42: Parser                                         $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "42. testsuite.at:76: testing ..."
      $at_traceon





  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Parser); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:76: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_top_srcdir/scripts/Test.st --verbose  -p Parser); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:76 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Parser); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Parser); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Parser); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:76: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;


  banner-4 ) # Banner 4. testsuite.at:78
    cat <<\_ATEOF

ANSI compliancy tests.

_ATEOF
    ;;

  43 ) # 43. testsuite.at:79: ArrayANSITest
    at_setup_line='testsuite.at:79'
    at_desc="ArrayANSITest"
    $at_quiet $ECHO_N " 43: ArrayANSITest                                  $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "43. testsuite.at:79: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ArrayANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:79: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ArrayANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:79 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ArrayANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ArrayANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ArrayANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:79: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  44 ) # 44. testsuite.at:80: ArrayFactoryANSITest
    at_setup_line='testsuite.at:80'
    at_desc="ArrayFactoryANSITest"
    $at_quiet $ECHO_N " 44: ArrayFactoryANSITest                           $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "44. testsuite.at:80: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ArrayFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:80: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ArrayFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:80 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ArrayFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ArrayFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ArrayFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:80: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  45 ) # 45. testsuite.at:81: BagANSITest
    at_setup_line='testsuite.at:81'
    at_desc="BagANSITest"
    $at_quiet $ECHO_N " 45: BagANSITest                                    $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "45. testsuite.at:81: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st BagANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:81: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st BagANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:81 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st BagANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st BagANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st BagANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:81: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  46 ) # 46. testsuite.at:82: BagFactoryANSITest
    at_setup_line='testsuite.at:82'
    at_desc="BagFactoryANSITest"
    $at_quiet $ECHO_N " 46: BagFactoryANSITest                             $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "46. testsuite.at:82: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st BagFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:82: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st BagFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:82 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st BagFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st BagFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st BagFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:82: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  47 ) # 47. testsuite.at:83: BooleanANSITest
    at_setup_line='testsuite.at:83'
    at_desc="BooleanANSITest"
    $at_quiet $ECHO_N " 47: BooleanANSITest                                $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "47. testsuite.at:83: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st BooleanANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:83: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st BooleanANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:83 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st BooleanANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st BooleanANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st BooleanANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:83: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  48 ) # 48. testsuite.at:84: ByteArrayANSITest
    at_setup_line='testsuite.at:84'
    at_desc="ByteArrayANSITest"
    $at_quiet $ECHO_N " 48: ByteArrayANSITest                              $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "48. testsuite.at:84: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ByteArrayANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:84: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ByteArrayANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:84 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ByteArrayANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ByteArrayANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ByteArrayANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:84: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  49 ) # 49. testsuite.at:85: ByteArrayFactoryANSITest
    at_setup_line='testsuite.at:85'
    at_desc="ByteArrayFactoryANSITest"
    $at_quiet $ECHO_N " 49: ByteArrayFactoryANSITest                       $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "49. testsuite.at:85: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ByteArrayFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:85: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ByteArrayFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:85 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ByteArrayFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ByteArrayFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ByteArrayFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:85: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  50 ) # 50. testsuite.at:86: CharacterANSITest
    at_setup_line='testsuite.at:86'
    at_desc="CharacterANSITest"
    $at_quiet $ECHO_N " 50: CharacterANSITest                              $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "50. testsuite.at:86: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st CharacterANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:86: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st CharacterANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:86 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st CharacterANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st CharacterANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st CharacterANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:86: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  51 ) # 51. testsuite.at:87: CharacterFactoryANSITest
    at_setup_line='testsuite.at:87'
    at_desc="CharacterFactoryANSITest"
    $at_quiet $ECHO_N " 51: CharacterFactoryANSITest                       $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "51. testsuite.at:87: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st CharacterFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:87: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st CharacterFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:87 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st CharacterFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st CharacterFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st CharacterFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:87: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  52 ) # 52. testsuite.at:88: DateAndTimeANSITest
    at_setup_line='testsuite.at:88'
    at_desc="DateAndTimeANSITest"
    $at_quiet $ECHO_N " 52: DateAndTimeANSITest                            $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "52. testsuite.at:88: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DateAndTimeANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:88: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st DateAndTimeANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:88 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DateAndTimeANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DateAndTimeANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DateAndTimeANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:88: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  53 ) # 53. testsuite.at:89: DateAndTimeFactoryANSITest
    at_setup_line='testsuite.at:89'
    at_desc="DateAndTimeFactoryANSITest"
    $at_quiet $ECHO_N " 53: DateAndTimeFactoryANSITest                     $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "53. testsuite.at:89: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DateAndTimeFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:89: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st DateAndTimeFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:89 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DateAndTimeFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DateAndTimeFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DateAndTimeFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:89: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  54 ) # 54. testsuite.at:90: DictionaryANSITest
    at_setup_line='testsuite.at:90'
    at_desc="DictionaryANSITest"
    $at_quiet $ECHO_N " 54: DictionaryANSITest                             $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "54. testsuite.at:90: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DictionaryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:90: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st DictionaryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:90 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DictionaryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DictionaryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DictionaryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:90: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  55 ) # 55. testsuite.at:91: DictionaryFactoryANSITest
    at_setup_line='testsuite.at:91'
    at_desc="DictionaryFactoryANSITest"
    $at_quiet $ECHO_N " 55: DictionaryFactoryANSITest                      $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "55. testsuite.at:91: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DictionaryFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:91: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st DictionaryFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:91 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DictionaryFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DictionaryFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DictionaryFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:91: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  56 ) # 56. testsuite.at:92: DurationANSITest
    at_setup_line='testsuite.at:92'
    at_desc="DurationANSITest"
    $at_quiet $ECHO_N " 56: DurationANSITest                               $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "56. testsuite.at:92: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DurationANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:92: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st DurationANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:92 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DurationANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DurationANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DurationANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:92: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  57 ) # 57. testsuite.at:93: DurationFactoryANSITest
    at_setup_line='testsuite.at:93'
    at_desc="DurationFactoryANSITest"
    $at_quiet $ECHO_N " 57: DurationFactoryANSITest                        $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "57. testsuite.at:93: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DurationFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:93: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st DurationFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:93 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DurationFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DurationFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DurationFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:93: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  58 ) # 58. testsuite.at:94: DyadicValuableANSITest
    at_setup_line='testsuite.at:94'
    at_desc="DyadicValuableANSITest"
    $at_quiet $ECHO_N " 58: DyadicValuableANSITest                         $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "58. testsuite.at:94: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DyadicValuableANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:94: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st DyadicValuableANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:94 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DyadicValuableANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DyadicValuableANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DyadicValuableANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:94: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  59 ) # 59. testsuite.at:95: ErrorANSITest
    at_setup_line='testsuite.at:95'
    at_desc="ErrorANSITest"
    $at_quiet $ECHO_N " 59: ErrorANSITest                                  $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "59. testsuite.at:95: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ErrorANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:95: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ErrorANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:95 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ErrorANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ErrorANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ErrorANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:95: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  60 ) # 60. testsuite.at:96: ErrorClassANSITest
    at_setup_line='testsuite.at:96'
    at_desc="ErrorClassANSITest"
    $at_quiet $ECHO_N " 60: ErrorClassANSITest                             $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "60. testsuite.at:96: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ErrorClassANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:96: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ErrorClassANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:96 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ErrorClassANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ErrorClassANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ErrorClassANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:96: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  61 ) # 61. testsuite.at:97: ExceptionANSITest
    at_setup_line='testsuite.at:97'
    at_desc="ExceptionANSITest"
    $at_quiet $ECHO_N " 61: ExceptionANSITest                              $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "61. testsuite.at:97: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ExceptionANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:97: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ExceptionANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:97 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ExceptionANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ExceptionANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ExceptionANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:97: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  62 ) # 62. testsuite.at:98: ExceptionClassANSITest
    at_setup_line='testsuite.at:98'
    at_desc="ExceptionClassANSITest"
    $at_quiet $ECHO_N " 62: ExceptionClassANSITest                         $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "62. testsuite.at:98: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ExceptionClassANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:98: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ExceptionClassANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:98 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ExceptionClassANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ExceptionClassANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ExceptionClassANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:98: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  63 ) # 63. testsuite.at:99: ExceptionSetANSITest
    at_setup_line='testsuite.at:99'
    at_desc="ExceptionSetANSITest"
    $at_quiet $ECHO_N " 63: ExceptionSetANSITest                           $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "63. testsuite.at:99: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ExceptionSetANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:99: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ExceptionSetANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:99 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ExceptionSetANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ExceptionSetANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ExceptionSetANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:99: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  64 ) # 64. testsuite.at:100: FailedMessageANSITest
    at_setup_line='testsuite.at:100'
    at_desc="FailedMessageANSITest"
    $at_quiet $ECHO_N " 64: FailedMessageANSITest                          $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "64. testsuite.at:100: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FailedMessageANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:100: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st FailedMessageANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:100 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FailedMessageANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FailedMessageANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FailedMessageANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:100: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  65 ) # 65. testsuite.at:101: FileStreamFactoryANSITest
    at_setup_line='testsuite.at:101'
    at_desc="FileStreamFactoryANSITest"
    $at_quiet $ECHO_N " 65: FileStreamFactoryANSITest                      $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "65. testsuite.at:101: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FileStreamFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:101: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st FileStreamFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:101 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FileStreamFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FileStreamFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FileStreamFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:101: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  66 ) # 66. testsuite.at:102: FloatANSITest
    at_setup_line='testsuite.at:102'
    at_desc="FloatANSITest"
    $at_quiet $ECHO_N " 66: FloatANSITest                                  $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "66. testsuite.at:102: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FloatANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:102: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st FloatANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:102 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FloatANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FloatANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FloatANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:102: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  67 ) # 67. testsuite.at:103: FloatCharacterizationANSITest
    at_setup_line='testsuite.at:103'
    at_desc="FloatCharacterizationANSITest"
    $at_quiet $ECHO_N " 67: FloatCharacterizationANSITest                  $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "67. testsuite.at:103: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FloatCharacterizationANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:103: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st FloatCharacterizationANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:103 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FloatCharacterizationANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FloatCharacterizationANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FloatCharacterizationANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:103: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  68 ) # 68. testsuite.at:104: FractionANSITest
    at_setup_line='testsuite.at:104'
    at_desc="FractionANSITest"
    $at_quiet $ECHO_N " 68: FractionANSITest                               $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "68. testsuite.at:104: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FractionANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:104: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st FractionANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:104 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FractionANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FractionANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FractionANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:104: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  69 ) # 69. testsuite.at:105: FractionFactoryANSITest
    at_setup_line='testsuite.at:105'
    at_desc="FractionFactoryANSITest"
    $at_quiet $ECHO_N " 69: FractionFactoryANSITest                        $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "69. testsuite.at:105: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FractionFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:105: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st FractionFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:105 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FractionFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FractionFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FractionFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:105: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  70 ) # 70. testsuite.at:106: IdentityDictionaryANSITest
    at_setup_line='testsuite.at:106'
    at_desc="IdentityDictionaryANSITest"
    $at_quiet $ECHO_N " 70: IdentityDictionaryANSITest                     $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "70. testsuite.at:106: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IdentityDictionaryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:106: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st IdentityDictionaryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:106 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IdentityDictionaryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IdentityDictionaryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IdentityDictionaryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:106: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  71 ) # 71. testsuite.at:107: IdentityDictionaryFactoryANSITest
    at_setup_line='testsuite.at:107'
    at_desc="IdentityDictionaryFactoryANSITest"
    $at_quiet $ECHO_N " 71: IdentityDictionaryFactoryANSITest              $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "71. testsuite.at:107: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IdentityDictionaryFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:107: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st IdentityDictionaryFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:107 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IdentityDictionaryFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IdentityDictionaryFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IdentityDictionaryFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:107: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  72 ) # 72. testsuite.at:108: IntegerANSITest
    at_setup_line='testsuite.at:108'
    at_desc="IntegerANSITest"
    $at_quiet $ECHO_N " 72: IntegerANSITest                                $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "72. testsuite.at:108: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IntegerANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:108: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st IntegerANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:108 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IntegerANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IntegerANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IntegerANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:108: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  73 ) # 73. testsuite.at:109: IntervalANSITest
    at_setup_line='testsuite.at:109'
    at_desc="IntervalANSITest"
    $at_quiet $ECHO_N " 73: IntervalANSITest                               $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "73. testsuite.at:109: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IntervalANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:109: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st IntervalANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:109 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IntervalANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IntervalANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IntervalANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:109: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  74 ) # 74. testsuite.at:110: IntervalFactoryANSITest
    at_setup_line='testsuite.at:110'
    at_desc="IntervalFactoryANSITest"
    $at_quiet $ECHO_N " 74: IntervalFactoryANSITest                        $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "74. testsuite.at:110: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IntervalFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:110: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st IntervalFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:110 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IntervalFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IntervalFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IntervalFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:110: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  75 ) # 75. testsuite.at:111: MessageNotUnderstoodANSITest
    at_setup_line='testsuite.at:111'
    at_desc="MessageNotUnderstoodANSITest"
    $at_quiet $ECHO_N " 75: MessageNotUnderstoodANSITest                   $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "75. testsuite.at:111: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st MessageNotUnderstoodANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:111: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st MessageNotUnderstoodANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:111 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st MessageNotUnderstoodANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st MessageNotUnderstoodANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st MessageNotUnderstoodANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:111: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  76 ) # 76. testsuite.at:112: MessageNotUnderstoodSelectorANSITest
    at_setup_line='testsuite.at:112'
    at_desc="MessageNotUnderstoodSelectorANSITest"
    $at_quiet $ECHO_N " 76: MessageNotUnderstoodSelectorANSITest           $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "76. testsuite.at:112: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st MessageNotUnderstoodSelectorANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:112: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st MessageNotUnderstoodSelectorANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:112 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st MessageNotUnderstoodSelectorANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st MessageNotUnderstoodSelectorANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st MessageNotUnderstoodSelectorANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:112: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  77 ) # 77. testsuite.at:113: MonadicBlockANSITest
    at_setup_line='testsuite.at:113'
    at_desc="MonadicBlockANSITest"
    $at_quiet $ECHO_N " 77: MonadicBlockANSITest                           $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "77. testsuite.at:113: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st MonadicBlockANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:113: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st MonadicBlockANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:113 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st MonadicBlockANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st MonadicBlockANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st MonadicBlockANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:113: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  78 ) # 78. testsuite.at:114: NilANSITest
    at_setup_line='testsuite.at:114'
    at_desc="NilANSITest"
    $at_quiet $ECHO_N " 78: NilANSITest                                    $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "78. testsuite.at:114: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st NilANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:114: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st NilANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:114 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st NilANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st NilANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st NilANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:114: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  79 ) # 79. testsuite.at:115: NiladicBlockANSITest
    at_setup_line='testsuite.at:115'
    at_desc="NiladicBlockANSITest"
    $at_quiet $ECHO_N " 79: NiladicBlockANSITest                           $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "79. testsuite.at:115: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st NiladicBlockANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:115: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st NiladicBlockANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:115 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st NiladicBlockANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st NiladicBlockANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st NiladicBlockANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:115: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  80 ) # 80. testsuite.at:116: NotificationANSITest
    at_setup_line='testsuite.at:116'
    at_desc="NotificationANSITest"
    $at_quiet $ECHO_N " 80: NotificationANSITest                           $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "80. testsuite.at:116: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st NotificationANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:116: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st NotificationANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:116 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st NotificationANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st NotificationANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st NotificationANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:116: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  81 ) # 81. testsuite.at:117: NotificationClassANSITest
    at_setup_line='testsuite.at:117'
    at_desc="NotificationClassANSITest"
    $at_quiet $ECHO_N " 81: NotificationClassANSITest                      $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "81. testsuite.at:117: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st NotificationClassANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:117: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st NotificationClassANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:117 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st NotificationClassANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st NotificationClassANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st NotificationClassANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:117: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  82 ) # 82. testsuite.at:118: ObjectANSITest
    at_setup_line='testsuite.at:118'
    at_desc="ObjectANSITest"
    $at_quiet $ECHO_N " 82: ObjectANSITest                                 $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "82. testsuite.at:118: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ObjectANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:118: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ObjectANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:118 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ObjectANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ObjectANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ObjectANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:118: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  83 ) # 83. testsuite.at:119: ObjectClassANSITest
    at_setup_line='testsuite.at:119'
    at_desc="ObjectClassANSITest"
    $at_quiet $ECHO_N " 83: ObjectClassANSITest                            $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "83. testsuite.at:119: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ObjectClassANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:119: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ObjectClassANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:119 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ObjectClassANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ObjectClassANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ObjectClassANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:119: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  84 ) # 84. testsuite.at:120: OrderedCollectionANSITest
    at_setup_line='testsuite.at:120'
    at_desc="OrderedCollectionANSITest"
    $at_quiet $ECHO_N " 84: OrderedCollectionANSITest                      $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "84. testsuite.at:120: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st OrderedCollectionANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:120: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st OrderedCollectionANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:120 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st OrderedCollectionANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st OrderedCollectionANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st OrderedCollectionANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:120: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  85 ) # 85. testsuite.at:121: OrderedCollectionFactoryANSITest
    at_setup_line='testsuite.at:121'
    at_desc="OrderedCollectionFactoryANSITest"
    $at_quiet $ECHO_N " 85: OrderedCollectionFactoryANSITest               $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "85. testsuite.at:121: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st OrderedCollectionFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:121: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st OrderedCollectionFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:121 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st OrderedCollectionFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st OrderedCollectionFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st OrderedCollectionFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:121: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  86 ) # 86. testsuite.at:122: ReadFileStreamANSITest
    at_setup_line='testsuite.at:122'
    at_desc="ReadFileStreamANSITest"
    $at_quiet $ECHO_N " 86: ReadFileStreamANSITest                         $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "86. testsuite.at:122: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadFileStreamANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:122: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ReadFileStreamANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:122 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadFileStreamANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadFileStreamANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadFileStreamANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:122: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  87 ) # 87. testsuite.at:123: ReadStreamANSITest
    at_setup_line='testsuite.at:123'
    at_desc="ReadStreamANSITest"
    $at_quiet $ECHO_N " 87: ReadStreamANSITest                             $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "87. testsuite.at:123: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadStreamANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:123: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ReadStreamANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:123 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadStreamANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadStreamANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadStreamANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:123: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  88 ) # 88. testsuite.at:124: ReadStreamFactoryANSITest
    at_setup_line='testsuite.at:124'
    at_desc="ReadStreamFactoryANSITest"
    $at_quiet $ECHO_N " 88: ReadStreamFactoryANSITest                      $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "88. testsuite.at:124: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadStreamFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:124: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ReadStreamFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:124 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadStreamFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadStreamFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadStreamFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:124: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  89 ) # 89. testsuite.at:125: ReadWriteStreamANSITest
    at_setup_line='testsuite.at:125'
    at_desc="ReadWriteStreamANSITest"
    $at_quiet $ECHO_N " 89: ReadWriteStreamANSITest                        $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "89. testsuite.at:125: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadWriteStreamANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:125: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ReadWriteStreamANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:125 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadWriteStreamANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadWriteStreamANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadWriteStreamANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:125: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  90 ) # 90. testsuite.at:126: ReadWriteStreamFactoryANSITest
    at_setup_line='testsuite.at:126'
    at_desc="ReadWriteStreamFactoryANSITest"
    $at_quiet $ECHO_N " 90: ReadWriteStreamFactoryANSITest                 $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "90. testsuite.at:126: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadWriteStreamFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:126: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ReadWriteStreamFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:126 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadWriteStreamFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadWriteStreamFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadWriteStreamFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:126: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  91 ) # 91. testsuite.at:127: ScaledDecimalANSITest
    at_setup_line='testsuite.at:127'
    at_desc="ScaledDecimalANSITest"
    $at_quiet $ECHO_N " 91: ScaledDecimalANSITest                          $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "91. testsuite.at:127: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ScaledDecimalANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:127: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ScaledDecimalANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:127 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ScaledDecimalANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ScaledDecimalANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ScaledDecimalANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:127: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  92 ) # 92. testsuite.at:128: SelectorANSITest
    at_setup_line='testsuite.at:128'
    at_desc="SelectorANSITest"
    $at_quiet $ECHO_N " 92: SelectorANSITest                               $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "92. testsuite.at:128: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SelectorANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:128: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st SelectorANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:128 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SelectorANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SelectorANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SelectorANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:128: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  93 ) # 93. testsuite.at:129: SetANSITest
    at_setup_line='testsuite.at:129'
    at_desc="SetANSITest"
    $at_quiet $ECHO_N " 93: SetANSITest                                    $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "93. testsuite.at:129: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SetANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:129: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st SetANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:129 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SetANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SetANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SetANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:129: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  94 ) # 94. testsuite.at:130: SetFactoryANSITest
    at_setup_line='testsuite.at:130'
    at_desc="SetFactoryANSITest"
    $at_quiet $ECHO_N " 94: SetFactoryANSITest                             $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "94. testsuite.at:130: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SetFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:130: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st SetFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:130 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SetFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SetFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SetFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:130: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  95 ) # 95. testsuite.at:131: SortedCollectionANSITest
    at_setup_line='testsuite.at:131'
    at_desc="SortedCollectionANSITest"
    $at_quiet $ECHO_N " 95: SortedCollectionANSITest                       $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "95. testsuite.at:131: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SortedCollectionANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:131: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st SortedCollectionANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:131 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SortedCollectionANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SortedCollectionANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SortedCollectionANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:131: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  96 ) # 96. testsuite.at:132: SortedCollectionFactoryANSITest
    at_setup_line='testsuite.at:132'
    at_desc="SortedCollectionFactoryANSITest"
    $at_quiet $ECHO_N " 96: SortedCollectionFactoryANSITest                $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "96. testsuite.at:132: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SortedCollectionFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:132: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st SortedCollectionFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:132 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SortedCollectionFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SortedCollectionFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SortedCollectionFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:132: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  97 ) # 97. testsuite.at:133: StringANSITest
    at_setup_line='testsuite.at:133'
    at_desc="StringANSITest"
    $at_quiet $ECHO_N " 97: StringANSITest                                 $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "97. testsuite.at:133: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st StringANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:133: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st StringANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:133 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st StringANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st StringANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st StringANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:133: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  98 ) # 98. testsuite.at:134: StringFactoryANSITest
    at_setup_line='testsuite.at:134'
    at_desc="StringFactoryANSITest"
    $at_quiet $ECHO_N " 98: StringFactoryANSITest                          $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "98. testsuite.at:134: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st StringFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:134: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st StringFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:134 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st StringFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st StringFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st StringFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:134: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  99 ) # 99. testsuite.at:135: SymbolANSITest
    at_setup_line='testsuite.at:135'
    at_desc="SymbolANSITest"
    $at_quiet $ECHO_N " 99: SymbolANSITest                                 $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "99. testsuite.at:135: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SymbolANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:135: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st SymbolANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:135 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SymbolANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SymbolANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SymbolANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:135: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  100 ) # 100. testsuite.at:136: TranscriptANSITest
    at_setup_line='testsuite.at:136'
    at_desc="TranscriptANSITest"
    $at_quiet $ECHO_N "100: TranscriptANSITest                             $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "100. testsuite.at:136: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st TranscriptANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:136: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st TranscriptANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:136 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st TranscriptANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st TranscriptANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st TranscriptANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:136: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  101 ) # 101. testsuite.at:137: WarningANSITest
    at_setup_line='testsuite.at:137'
    at_desc="WarningANSITest"
    $at_quiet $ECHO_N "101: WarningANSITest                                $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "101. testsuite.at:137: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WarningANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:137: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st WarningANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:137 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WarningANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WarningANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WarningANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:137: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  102 ) # 102. testsuite.at:138: WarningClassANSITest
    at_setup_line='testsuite.at:138'
    at_desc="WarningClassANSITest"
    $at_quiet $ECHO_N "102: WarningClassANSITest                           $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "102. testsuite.at:138: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WarningClassANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:138: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st WarningClassANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:138 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WarningClassANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WarningClassANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WarningClassANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:138: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  103 ) # 103. testsuite.at:139: WriteFileStreamANSITest
    at_setup_line='testsuite.at:139'
    at_desc="WriteFileStreamANSITest"
    $at_quiet $ECHO_N "103: WriteFileStreamANSITest                        $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "103. testsuite.at:139: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WriteFileStreamANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:139: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st WriteFileStreamANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:139 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WriteFileStreamANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WriteFileStreamANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WriteFileStreamANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:139: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  104 ) # 104. testsuite.at:140: WriteStreamANSITest
    at_setup_line='testsuite.at:140'
    at_desc="WriteStreamANSITest"
    $at_quiet $ECHO_N "104: WriteStreamANSITest                            $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "104. testsuite.at:140: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WriteStreamANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:140: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st WriteStreamANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:140 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WriteStreamANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WriteStreamANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WriteStreamANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:140: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  105 ) # 105. testsuite.at:141: WriteStreamFactoryANSITest
    at_setup_line='testsuite.at:141'
    at_desc="WriteStreamFactoryANSITest"
    $at_quiet $ECHO_N "105: WriteStreamFactoryANSITest                     $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "105. testsuite.at:141: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WriteStreamFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:141: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st WriteStreamFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:141 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WriteStreamFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WriteStreamFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WriteStreamFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:141: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  106 ) # 106. testsuite.at:142: ZeroDivideANSITest
    at_setup_line='testsuite.at:142'
    at_desc="ZeroDivideANSITest"
    $at_quiet $ECHO_N "106: ZeroDivideANSITest                             $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "106. testsuite.at:142: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ZeroDivideANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:142: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ZeroDivideANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:142 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ZeroDivideANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ZeroDivideANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ZeroDivideANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:142: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  107 ) # 107. testsuite.at:143: ZeroDivideFactoryANSITest
    at_setup_line='testsuite.at:143'
    at_desc="ZeroDivideFactoryANSITest"
    $at_quiet $ECHO_N "107: ZeroDivideFactoryANSITest                      $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "107. testsuite.at:143: testing ..."
      $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ZeroDivideFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:143: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ZeroDivideFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:143 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ZeroDivideFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ZeroDivideFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ZeroDivideFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:143: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;


  banner-5 ) # Banner 5. testsuite.at:145
    cat <<\_ATEOF

Other packages.

_ATEOF
    ;;

  108 ) # 108. testsuite.at:146: Complex
    at_setup_line='testsuite.at:146'
    at_desc="Complex"
    $at_quiet $ECHO_N "108: Complex                                        $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "108. testsuite.at:146: testing ..."
      $at_traceon





  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Complex); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:146: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_top_srcdir/scripts/Test.st --verbose  -p Complex); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:146 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Complex); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Complex); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Complex); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:146: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  109 ) # 109. testsuite.at:147: Continuations
    at_setup_line='testsuite.at:147'
    at_desc="Continuations"
    $at_quiet $ECHO_N "109: Continuations                                  $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "109. testsuite.at:147: testing ..."
      $at_traceon





  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Continuations); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:147: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_top_srcdir/scripts/Test.st --verbose  -p Continuations); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:147 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Continuations); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Continuations); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Continuations); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:147: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  110 ) # 110. testsuite.at:148: DBD-MySQL
    at_setup_line='testsuite.at:148'
    at_desc="DBD-MySQL"
    $at_quiet $ECHO_N "110: DBD-MySQL                                      $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "110. testsuite.at:148: testing ..."
      $at_traceon



  $at_traceoff
echo "$at_srcdir/testsuite.at:148: test \"\$enable_mysql_tests\" != no || exit 77"
echo testsuite.at:148 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "test \"$enable_mysql_tests\" != no || exit 77" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; test "$enable_mysql_tests" != no || exit 77 ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; test "$enable_mysql_tests" != no || exit 77 ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
$at_diff "$at_devnull" "$at_stdout" || at_failed=:
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:148: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose $mysqlvars -p DBD-MySQL); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:148: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_top_srcdir/scripts/Test.st --verbose \$mysqlvars -p DBD-MySQL); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:148 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose $mysqlvars -p DBD-MySQL); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose $mysqlvars -p DBD-MySQL); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose $mysqlvars -p DBD-MySQL); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:148: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  111 ) # 111. testsuite.at:149: DBD-SQLite
    at_setup_line='testsuite.at:149'
    at_desc="DBD-SQLite"
    $at_quiet $ECHO_N "111: DBD-SQLite                                     $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "111. testsuite.at:149: testing ..."
      $at_traceon





  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p DBD-SQLite
    ret=$?
    case $ret in
      2) exit 77 ;;
      0|1) exit $ret ;;
    esac); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:149: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_top_srcdir/scripts/Test.st --verbose  -p DBD-SQLite
    ret=\$?
    case \$ret in
      2) exit 77 ;;
      0|1) exit \$ret ;;
    esac); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:149 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    echo 'Not enabling shell tracing (command contains an embedded newline)'
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p DBD-SQLite
    ret=$?
    case $ret in
      2) exit 77 ;;
      0|1) exit $ret ;;
    esac); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p DBD-SQLite
    ret=$?
    case $ret in
      2) exit 77 ;;
      0|1) exit $ret ;;
    esac); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:149: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  112 ) # 112. testsuite.at:150: DebugTools
    at_setup_line='testsuite.at:150'
    at_desc="DebugTools"
    $at_quiet $ECHO_N "112: DebugTools                                     $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "112. testsuite.at:150: testing ..."
      $at_traceon





  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p DebugTools); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:150: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_top_srcdir/scripts/Test.st --verbose  -p DebugTools); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:150 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p DebugTools); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p DebugTools); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p DebugTools); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:150: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  113 ) # 113. testsuite.at:151: DhbNumericalMethods
    at_setup_line='testsuite.at:151'
    at_desc="DhbNumericalMethods"
    $at_quiet $ECHO_N "113: DhbNumericalMethods                            $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "113. testsuite.at:151: testing ..."
      $at_traceon





  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p DhbNumericalMethods); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:151: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_top_srcdir/scripts/Test.st --verbose  -p DhbNumericalMethods); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:151 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p DhbNumericalMethods); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p DhbNumericalMethods); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p DhbNumericalMethods); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:151: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  114 ) # 114. testsuite.at:152: Digest
    at_setup_line='testsuite.at:152'
    at_desc="Digest"
    $at_quiet $ECHO_N "114: Digest                                         $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "114. testsuite.at:152: testing ..."
      $at_traceon





  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Digest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:152: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_top_srcdir/scripts/Test.st --verbose  -p Digest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:152 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Digest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Digest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Digest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:152: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  115 ) # 115. testsuite.at:153: GDBM
    at_setup_line='testsuite.at:153'
    at_desc="GDBM"
    $at_quiet $ECHO_N "115: GDBM                                           $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "115. testsuite.at:153: testing ..."
      $at_traceon





  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p GDBM
    ret=$?
    case $ret in
      2) exit 77 ;;
      0|1) exit $ret ;;
    esac); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:153: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_top_srcdir/scripts/Test.st --verbose  -p GDBM
    ret=\$?
    case \$ret in
      2) exit 77 ;;
      0|1) exit \$ret ;;
    esac); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:153 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    echo 'Not enabling shell tracing (command contains an embedded newline)'
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p GDBM
    ret=$?
    case $ret in
      2) exit 77 ;;
      0|1) exit $ret ;;
    esac); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p GDBM
    ret=$?
    case $ret in
      2) exit 77 ;;
      0|1) exit $ret ;;
    esac); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:153: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  116 ) # 116. testsuite.at:154: Iconv
    at_setup_line='testsuite.at:154'
    at_desc="Iconv"
    $at_quiet $ECHO_N "116: Iconv                                          $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "116. testsuite.at:154: testing ..."
      $at_traceon





  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Iconv
    ret=$?
    case $ret in
      2) exit 77 ;;
      0|1) exit $ret ;;
    esac); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:154: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_top_srcdir/scripts/Test.st --verbose  -p Iconv
    ret=\$?
    case \$ret in
      2) exit 77 ;;
      0|1) exit \$ret ;;
    esac); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:154 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    echo 'Not enabling shell tracing (command contains an embedded newline)'
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Iconv
    ret=$?
    case $ret in
      2) exit 77 ;;
      0|1) exit $ret ;;
    esac); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Iconv
    ret=$?
    case $ret in
      2) exit 77 ;;
      0|1) exit $ret ;;
    esac); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:154: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  117 ) # 117. testsuite.at:155: ROE
    at_setup_line='testsuite.at:155'
    at_desc="ROE"
    $at_quiet $ECHO_N "117: ROE                                            $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "117. testsuite.at:155: testing ..."
      $at_traceon





  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p ROE
    ret=$?
    case $ret in
      2) exit 77 ;;
      0|1) exit $ret ;;
    esac); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:155: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_top_srcdir/scripts/Test.st --verbose  -p ROE
    ret=\$?
    case \$ret in
      2) exit 77 ;;
      0|1) exit \$ret ;;
    esac); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:155 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    echo 'Not enabling shell tracing (command contains an embedded newline)'
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p ROE
    ret=$?
    case $ret in
      2) exit 77 ;;
      0|1) exit $ret ;;
    esac); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p ROE
    ret=$?
    case $ret in
      2) exit 77 ;;
      0|1) exit $ret ;;
    esac); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:155: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  118 ) # 118. testsuite.at:156: Sport
    at_setup_line='testsuite.at:156'
    at_desc="Sport"
    $at_quiet $ECHO_N "118: Sport                                          $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "118. testsuite.at:156: testing ..."
      $at_traceon





  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Sport); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:156: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_top_srcdir/scripts/Test.st --verbose  -p Sport); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:156 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Sport); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Sport); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Sport); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:156: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  119 ) # 119. testsuite.at:157: Swazoo
    at_setup_line='testsuite.at:157'
    at_desc="Swazoo"
    $at_quiet $ECHO_N "119: Swazoo                                         $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "119. testsuite.at:157: testing ..."
      $at_traceon





  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Swazoo); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:157: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_top_srcdir/scripts/Test.st --verbose  -p Swazoo); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:157 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    case "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Swazoo); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . retcode" in
        *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)' ;;
 *) at_trace_this=yes ;;
    esac
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Swazoo); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Swazoo); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:157: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;

  120 ) # 120. testsuite.at:158: ZLib
    at_setup_line='testsuite.at:158'
    at_desc="ZLib"
    $at_quiet $ECHO_N "120: ZLib                                           $ECHO_C"
    at_xfail=no
    echo "#                             -*- compilation -*-" >> "$at_group_log"
    (
      echo "120. testsuite.at:158: testing ..."
      $at_traceon





  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p ZLib
    ret=$?
    case $ret in
      2) exit 77 ;;
      0|1) exit $ret ;;
    esac); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode"
  $at_traceoff
echo "$at_srcdir/testsuite.at:158: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_top_srcdir/scripts/Test.st --verbose  -p ZLib
    ret=\$?
    case \$ret in
      2) exit 77 ;;
      0|1) exit \$ret ;;
    esac); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . retcode"
echo testsuite.at:158 >"$at_check_line_file"

at_trace_this=
if test -n "$at_traceon"; then
    echo 'Not enabling shell tracing (command contains an embedded newline)'
fi

if test -n "$at_trace_this"; then
    ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p ZLib
    ret=$?
    case $ret in
      2) exit 77 ;;
      0|1) exit $ret ;;
    esac); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stder1"
    at_status=$?
    grep '^ *+' "$at_stder1" >&2
    grep -v '^ *+' "$at_stder1" >"$at_stderr"
else
    ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p ZLib
    ret=$?
    case $ret in
      2) exit 77 ;;
      0|1) exit $ret ;;
    esac); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . retcode ) >"$at_stdout" 2>"$at_stderr"
    at_status=$?
fi

at_failed=false
$at_diff "$at_devnull" "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
case $at_status in
   77) echo 77 > "$at_status_file"; exit 77;;
   0) ;;
   *) echo "$at_srcdir/testsuite.at:158: exit code was $at_status, expected 0"
      at_failed=:;;
esac
if $at_failed; then


  echo 1 > "$at_status_file"
  exit 1
fi

$at_traceon


        $at_traceoff
      $at_times_p && times >"$at_times_file"
    ) 5>&1 2>&1 | eval $at_tee_pipe
    at_status=`cat "$at_status_file"`
    ;;


  * )
    echo "$as_me: no such test group: $at_group" >&2
    continue
    ;;
  esac

  # Be sure to come back to the suite directory, in particular
  # since below we might `rm' the group directory we are in currently.
  cd "$at_suite_dir"

  case $at_group in
    banner-*) ;;
    *)
      if test ! -f "$at_check_line_file"; then
	sed "s/^ */$as_me: warning: /" <<_ATEOF
	A failure happened in a test group before any test could be
	run. This means that test suite is improperly designed.  Please
	report this failure to <help-smalltalk@gnu.org>.
_ATEOF
	echo "$at_setup_line" >"$at_check_line_file"
      fi
      at_group_count=`expr 1 + $at_group_count`
      $at_verbose $ECHO_N "$at_group. $at_setup_line: $ECHO_C"
      echo $ECHO_N "$at_group. $at_setup_line: $ECHO_C" >> "$at_group_log"
      case $at_xfail:$at_status in
	yes:0)
	    at_msg="UNEXPECTED PASS"
	    at_xpass_list="$at_xpass_list $at_group"
	    at_errexit=$at_errexit_p
	    ;;
	no:0)
	    at_msg="ok"
	    at_pass_list="$at_pass_list $at_group"
	    at_errexit=false
	    ;;
	*:77)
	    at_msg='skipped ('`cat "$at_check_line_file"`')'
	    at_skip_list="$at_skip_list $at_group"
	    at_errexit=false
	    ;;
	yes:*)
	    at_msg='expected failure ('`cat "$at_check_line_file"`')'
	    at_xfail_list="$at_xfail_list $at_group"
	    at_errexit=false
	    ;;
	no:*)
	    at_msg='FAILED ('`cat "$at_check_line_file"`')'
	    at_fail_list="$at_fail_list $at_group"
	    at_errexit=$at_errexit_p
	    ;;
      esac
      # Make sure there is a separator even with long titles.
      echo " $at_msg"
      at_log_msg="$at_group. $at_desc ($at_setup_line): $at_msg"
      case $at_status in
	0|77)
	  # $at_times_file is only available if the group succeeded.
	  # We're not including the group log, so the success message
	  # is written in the global log separately.  But we also
	  # write to the group log in case they're using -d.
	  if test -f "$at_times_file"; then
	    at_log_msg="$at_log_msg	("`sed 1d "$at_times_file"`')'
	    rm -f "$at_times_file"
          fi
	  echo "$at_log_msg" >> "$at_group_log"
	  echo "$at_log_msg" >&5

	  # Cleanup the group directory, unless the user wants the files.
	  if $at_debug_p ; then
	    	  {
	    echo "#! /bin/sh"
	    echo 'test "${ZSH_VERSION+set}" = set && alias -g '\''${1+"$@"}'\''='\''"$@"'\'''
	    echo "cd '$at_dir'"
	    echo 'exec ${CONFIG_SHELL-'"$SHELL"'}' "$0" \
	         '-v -d' "$at_debug_args" "$at_group" '${1+"$@"}'
	    echo 'exit 1'
	  } >$at_group_dir/run
	  chmod +x $at_group_dir/run

	  elif test -d "$at_group_dir"; then
	    find "$at_group_dir" -type d ! -perm -700 -exec chmod u+rwx \{\} \;
	    rm -fr "$at_group_dir"
	  fi
	  ;;
	*)
	  # Upon failure, include the log into the testsuite's global
	  # log.  The failure message is written in the group log.  It
	  # is later included in the global log.
	  echo "$at_log_msg" >> "$at_group_log"

	  # Upon failure, keep the group directory for autopsy, and
	  # create the debugging script.
	  	  {
	    echo "#! /bin/sh"
	    echo 'test "${ZSH_VERSION+set}" = set && alias -g '\''${1+"$@"}'\''='\''"$@"'\'''
	    echo "cd '$at_dir'"
	    echo 'exec ${CONFIG_SHELL-'"$SHELL"'}' "$0" \
	         '-v -d' "$at_debug_args" "$at_group" '${1+"$@"}'
	    echo 'exit 1'
	  } >$at_group_dir/run
	  chmod +x $at_group_dir/run

	  $at_errexit && break
	  ;;
      esac
      ;;
  esac
done

# Back to the top directory.
cd "$at_dir"

# Compute the duration of the suite.
at_stop_date=`date`
at_stop_time=`date +%s 2>/dev/null`
echo "$as_me: ending at: $at_stop_date" >&5
case $at_start_time,$at_stop_time in
  [0-9]*,[0-9]*)
    at_duration_s=`expr $at_stop_time - $at_start_time`
    at_duration_m=`expr $at_duration_s / 60`
    at_duration_h=`expr $at_duration_m / 60`
    at_duration_s=`expr $at_duration_s % 60`
    at_duration_m=`expr $at_duration_m % 60`
    at_duration="${at_duration_h}h ${at_duration_m}m ${at_duration_s}s"
    echo "$as_me: test suite duration: $at_duration" >&5
    ;;
esac

# Wrap up the test suite with summary statistics.
at_skip_count=`set dummy $at_skip_list; shift; echo $#`
at_fail_count=`set dummy $at_fail_list; shift; echo $#`
at_xpass_count=`set dummy $at_xpass_list; shift; echo $#`
at_xfail_count=`set dummy $at_xfail_list; shift; echo $#`

at_run_count=`expr $at_group_count - $at_skip_count`
at_unexpected_count=`expr $at_xpass_count + $at_fail_count`
at_total_fail_count=`expr $at_xfail_count + $at_fail_count`

echo
cat <<\_ASBOX
## ------------- ##
## Test results. ##
## ------------- ##
_ASBOX
echo
{
  echo
  cat <<\_ASBOX
## ------------- ##
## Test results. ##
## ------------- ##
_ASBOX
  echo
} >&5

if test $at_run_count = 1; then
  at_result="1 test"
  at_were=was
else
  at_result="$at_run_count tests"
  at_were=were
fi
if $at_errexit_p && test $at_unexpected_count != 0; then
  if test $at_xpass_count = 1; then
    at_result="$at_result $at_were run, one passed"
  else
    at_result="$at_result $at_were run, one failed"
  fi
  at_result="$at_result unexpectedly and inhibited subsequent tests."
else
  # Don't you just love exponential explosion of the number of cases?
  case $at_xpass_count:$at_fail_count:$at_xfail_count in
    # So far, so good.
    0:0:0) at_result="$at_result $at_were successful." ;;
    0:0:*) at_result="$at_result behaved as expected." ;;

    # Some unexpected failures
    0:*:0) at_result="$at_result $at_were run,
$at_fail_count failed unexpectedly." ;;

    # Some failures, both expected and unexpected
    0:*:1) at_result="$at_result $at_were run,
$at_total_fail_count failed ($at_xfail_count expected failure)." ;;
    0:*:*) at_result="$at_result $at_were run,
$at_total_fail_count failed ($at_xfail_count expected failures)." ;;

    # No unexpected failures, but some xpasses
    *:0:*) at_result="$at_result $at_were run,
$at_xpass_count passed unexpectedly." ;;

    # No expected failures, but failures and xpasses
    *:1:0) at_result="$at_result $at_were run,
$at_unexpected_count did not behave as expected ($at_fail_count unexpected failure)." ;;
    *:*:0) at_result="$at_result $at_were run,
$at_unexpected_count did not behave as expected ($at_fail_count unexpected failures)." ;;

    # All of them.
    *:*:1) at_result="$at_result $at_were run,
$at_xpass_count passed unexpectedly,
$at_total_fail_count failed ($at_xfail_count expected failure)." ;;
    *:*:*) at_result="$at_result $at_were run,
$at_xpass_count passed unexpectedly,
$at_total_fail_count failed ($at_xfail_count expected failures)." ;;
  esac

  if test $at_skip_count = 0 && test $at_run_count -gt 1; then
    at_result="All $at_result"
  fi
fi

# Now put skips in the mix.
case $at_skip_count in
  0) ;;
  1) at_result="$at_result
1 test was skipped." ;;
  *) at_result="$at_result
$at_skip_count tests were skipped." ;;
esac

if test $at_unexpected_count = 0; then
  echo "$at_result"
  echo "$at_result" >&5
else
  echo "ERROR: $at_result" >&2
  echo "ERROR: $at_result" >&5
  {
    echo
    cat <<\_ASBOX
## ------------------------ ##
## Summary of the failures. ##
## ------------------------ ##
_ASBOX

    # Summary of failed and skipped tests.
    if test $at_fail_count != 0; then
      echo "Failed tests:"
      $SHELL "$0" $at_fail_list --list
      echo
    fi
    if test $at_skip_count != 0; then
      echo "Skipped tests:"
      $SHELL "$0" $at_skip_list --list
      echo
    fi
    if test $at_xpass_count != 0; then
      echo "Unexpected passes:"
      $SHELL "$0" $at_xpass_list --list
      echo
    fi
    if test $at_fail_count != 0; then
      cat <<\_ASBOX
## ---------------------- ##
## Detailed failed tests. ##
## ---------------------- ##
_ASBOX
      echo
      for at_group in $at_fail_list
      do
        at_group_normalized=$at_group

  while :; do
    case $at_group_normalized in #(
    $at_format*) break;;
    esac
    at_group_normalized=0$at_group_normalized
  done

        cat "$at_suite_dir/$at_group_normalized/$as_me.log"
        echo
      done
      echo
    fi
    if test -n "$at_top_srcdir"; then
      sed 'h;s/./-/g;s/^.../## /;s/...$/ ##/;p;x;p;x' <<_ASBOX
## ${at_top_build_prefix}config.log ##
_ASBOX
      sed 's/^/| /' ${at_top_build_prefix}config.log
      echo
    fi
  } >&5

  sed 'h;s/./-/g;s/^.../## /;s/...$/ ##/;p;x;p;x' <<_ASBOX
## $as_me.log was created. ##
_ASBOX

  echo
  echo "Please send \`${at_testdir+${at_testdir}/}$as_me.log' and all information you think might help:"
  echo
  echo "   To: <help-smalltalk@gnu.org>"
  echo "   Subject: [GNU Smalltalk 3.0] $as_me:$at_fail_list${at_fail_list:+ failed${at_xpass_list:+,}}$at_xpass_list${at_xpass_list:+ passed unexpectedly}"
  echo
  if test $at_debug_p = false; then
    echo
    echo 'You may investigate any problem if you feel able to do so, in which'
    echo 'case the test suite provides a good starting point.  Its output may'
    echo "be found below \`${at_testdir+${at_testdir}/}$as_me.dir'."
    echo
  fi
    exit 1
fi

exit 0



